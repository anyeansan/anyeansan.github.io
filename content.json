{"meta":{"title":"安₃","subtitle":"我未成名君未嫁 可能俱是不如人","description":"一蓑烟雨任平生","author":"安₃","url":"https://anyeansan.github.io","root":"/anyeansan.github.io/"},"pages":[{"title":"categories","date":"2019-11-12T04:47:40.000Z","updated":"2019-11-12T04:48:21.027Z","comments":true,"path":"categories/index.html","permalink":"https://anyeansan.github.io/categories/","excerpt":"","text":""},{"title":"tags","date":"2019-11-12T04:46:04.000Z","updated":"2019-11-12T04:47:01.286Z","comments":true,"path":"tags/index.html","permalink":"https://anyeansan.github.io/tags/","excerpt":"","text":""}],"posts":[{"title":"Linux 综合架构","slug":"Linux-综合架构","date":"2020-03-29T03:04:30.000Z","updated":"2020-03-29T03:05:52.277Z","comments":true,"path":"2020/03/29/Linux-综合架构/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/","excerpt":"","text":"一 中小规模网站综合架构组成1.1 前端 防火墙 访问策略控制 负载均衡服务器 对访问请求进行调度处理 web服务器 处理用户请求 1.2 后端 数据库服务器 存储字符数据，如订单… 存储服务器 存储图片 音频 视频 附件都数据 备份服务器 存储网站所有服务器重要数据 缓存服务器 将常用数据存储到内存中，减轻服务器压力，提升用户体验 1.3 扩展 批量管理服务器 批量管理多台服务器主机 VPN服务器 内部员工访问架构 PPTP vpn 审计服务器（跳板机） 内部员工操作管理架构 jumpserver 监控服务器 综合架构服务器的监控 zabbix 网站架构单点问题（高可用服务） 负载均衡服务器 keepalived 数据库 mha 存储服务器 分布式存储 备份服务 rsync 云存储 缓存服务 集群/哨兵模式 二 备份2.1 备份策略 全量备份 完整备份所有数据 增量备份 做一次完全备份，以后每次只备份新增的数据 例 第一天完全备份 第二天备份第二天新增数据 第三天备份第三天新增数据 第四天备份第四天新增数据 差异备份 做一次完全备份，以后每次只备份和第一次完全备份不同的数据 例 第一天完全备份 第二天备份第二天新增数据 第三天备份第二天和第三天新增数据（和第一次比较） 第四天备份第二天第三天和第四天新增数据（和第一次比较） 2.2 备份命令 本地备份 cp 远程备份 scp -rp -r 递归 -p 保持文件属性 2.3 rsync1 概述 Rsync是一款开源的、快速的、多功能的、可实现全量及增量的本地或远程数据同步备份的优秀工具 安装 rsync 软件包 2 本地备份 rsync [OPTION] SRC DEST 等价于 cp 命令 rsync FILE 等价于 ls 命令 3 远程备份1 Push rsync [OPTION] SRC [USER@]HOST:DEST 等价于 scp 命令 OPTION -a 命令的归档参数，等价于 -rtopgDl -v 显示详细的传输信息 -z 传输时进行压缩以提高效率 -r 递归 -t 保持文件最后修改时间不变 -o 保持文件属主信息不变 -p 保持文件权限信息不变 -g 保持文件属组信息不变 -D 保持设备文件信息不变 -P 显示数据传输的进度信息 -l 保留软连接信息 -L 保留软连接指向目标文件的数据 --exclude=PATTERN 排除指定数据不被传输 --exclude-from=file 排除指定数据不被传输(批量排除) --bwlimit=RATE 显示传输的速率 --delete 让目标和源数据保持一致，即会删除目标中源没有的数据 USER@ 以什么用户身份推送数据（默认以当前用户） 2 Pull rsync [OPTION] [USER@]HOST:SRC [DEST] USER@ 以什么用户身份拉取数据（默认以当前用户） 4 守护进程方式（一直在后台持续的运行）1 rsync 守护进程部署流程 安装 rpm -qa rsync yum install -y rsync 配置文件 /etc/rsyncd.conf1234567891011121314151617181920uid = nobody # 管理备份目录的用户gid = nobody # 管理备份目录的用户组port = 873 # rsync # 备份服务的端口号fake super = yes # 将rsync服务虚拟用户伪装成为一个超级管理员用户use chroot = yes # 安全相关max connections = 4 # 最大链接数timeout = 900 # 超时时间pid file = /var/run/rsyncd.pid # 记录进程号的文件，服务运行时才有lock file = /var/run/rsync.lock # 锁文件log file = /var/log/rsyncd.log # rsync 服务日志文件ignore errors # 忽略传输过程中的简单错误read only =false # 备份目录可读写list = false # 客户端是否可以查看服务端的模块信息hosts allow = # 白名单hosts deny = # 黑名单auth users = # 指定认证用户secrests file = /etc/rsync.password # 指定认证用户密码文件 `用户名称:密码信息`[backup] # 模块信息 comment = # 注释信息 path = # 指定备份目录 创建rsync服务的虚拟用户 创建rsync服务密码认证文件（权限 600） 创建备份目录并修改属主属组信息 启动服务 systemctl start rsyncd 2 客户端免密码配置 创建一个密码文件（权限 600），存储密码 执行命令时，在命令后添加 --password-file =密码文件路径 3 Push rsync [OPTION] SRC [USER@]HOST::DEST OPTION 常用 -avz USER@ 指定认证用户信息 DEST 指定备份服务器的模块 4 Pull rsync [OPTION] [USER@]HOST::SRC [DEST] 5 rsync 原理 客户端当前登录用户通过命令向服务端发送推送请求 服务端判断客户端命令中认证用户是否存在配置 /etc/rsyncd.conf 中 服务端判断客户端认证用户密码是否正确 /etc/rsync.password 开始传输后，无论客户端发送请求的是root还是普通用户，到服务端都是通过配置的虚拟管理用户来备份。也就是说，传输的文件属主和属组在服务端会改为虚拟管理用户。 假如文件在客户端属主和属组是 root，服务端虚拟管理用户是 xiaoqiang，即在传输文件时需要把文件的属主和属组改为xiaoqiang，权限不足。 fake super 配置会将虚拟管理用户伪装成root 三 存储3.1 存储服务 FTP（File Transfer Protocol） FTP 服务器 FTP 客户端 samba windows–linux之间数据传输，Linux部署samba NFS（Network File System） linux–linux之间数据传输 门户网站-分布式存储 FastDFS GlusterFS 3.2 NFS1 概述 网络文件共享系统，主要功能是通过网络（一般是局域网）让不同的主机系统之间可以共享文件 2 RPC（Remote Procedure Call）四 批量管理4.1 ansible五 WEB服务","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 定时任务","slug":"Linux-定时任务","date":"2020-03-29T03:04:21.000Z","updated":"2020-03-29T03:06:30.004Z","comments":true,"path":"2020/03/29/Linux-定时任务/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"一 定时任务1.1 实现定时任务的软件 cronie 周期性定时任务 atd 定时任务只执行一次，一次性定时服务 anacron 非7*24小时运行的服务器，用在个人电脑上 二 atd at 时间 创建一次性定时任务 at -l 查看一次性定时任务 atrm 任务序号 删除一次性定时任务 三 crond3.1 概述 Linux 系统定时任务由 crond 这个系统服务来控制，Linux 系统上原本就有非常多的计划性工作，所以 crond 服务是默认启动的 Linux 系统也提供了使用者控制计划任务的命令 crontab 命令 3.2 系统定时任务1234/etc/cron.hourly # 每小时/etc/cron.daily # 每天 00:00-23:59/etc/cron.weekly # 每周 7天/etc/cron.monthly # 每月 放在以上4个目录中的脚本会在相应周期自动执行。 /etc/crontab 系统定时任务的配置文件 只有root可以编辑 3.3 用户定时任务（cronie）1 相关文件 /var/spool/cron/用户名 用户定时任务配置文件 /var/log/cron 用户定时任务服务运行记录文件 /etc/cron.allow 当系统中有此文件时，只有写入此文件的用户可以使用 crontab 命令，优先级高于 /etc/cron.deny /etc/cron.deny 此文件中所列用户不允许使用 crontab 命令 2 配置 crontab crontab [-u USER] [OPTION] [FILE] USER 如果省略则表示针对当前用户 OPTION -l 查看用户定时任务列表 等价于 cat /var/spool/cron/用户名 -e 编辑用户定时任务 等价于 vim /var/spool/cron/用户名 -r 删除用户定时任务 等价于 rm -f /var/spool/cron/用户名 3 定时任务语法123456分 时 日 月 周 任务分：0-59时：0-23日：1-31月：1-12周：0-6 * 表示每（分/时/天/月/周） */N 表示每隔 N（分/时/天/月/周） M/N 表示从 M 开始每隔 N（分/时/天/月/周） M-N 表示 M 到 N 如 01-05 * * * * 表示每小时的01分到05分（01 02 03 04 05） M,N 表示 M 和 N 如 01,05 * * * * 表示每小时的01分和05分（01 05） N 表示具体时间 如 10 02 * * * 表示每天的02时10分 4 定时任务规范 编写定时任务要有注释说明 编写定时任务路径信息尽量使用绝对路径 编写定时任务要使用绝对路径命令 定时任务识别的 PATH 信息只有/usr/bin 和 /bin 编写定时任务尽量不要产生屏幕信息 定时任务执行时如果产生标准输出/标准错误输出（即输出到屏幕的信息），会以邮件的方式通知用户 问题 可能会导致邮件文件过大，占用磁盘空间 解决方式 关闭邮件服务 postfix，虽然可以阻止邮件发送，但会类似其它邮箱的草稿，不断在 /var/spool/postfix/maildrop/ 产生小文件占用磁盘空间 标准输出/标准错误输出都不输出到屏幕，而是重定向到黑洞文件 /dev/null 中（推荐）","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 网络","slug":"Linux-网络","date":"2020-03-29T03:04:13.000Z","updated":"2020-03-29T03:06:11.552Z","comments":true,"path":"2020/03/29/Linux-网络/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%BD%91%E7%BB%9C/","excerpt":"","text":"一 虚拟机网络连接1.1 Bridged（桥接模式） 虚拟机相当于局域网内一台独立的主机，和宿主主机是对等的，同处于一个局域网 虚拟主机和宿主机网络地址是一致的 网卡：VMnet0 优点 局域网内其它物理主机可以直接和虚拟主机通信 缺点 占用局域网IP地址，同一个网段主机ip地址有限，可能会与其它物理主机ip冲突 1.2 NAT（网络地址转换模式） 虚拟主机 → 虚拟交换机 → 虚拟路由 → 宿主机 虚拟主机通过宿主机访问外网，宿主机相当于一个路由器，会将虚拟主机IP与宿主机IP做一个映射，访问外网使用的都是宿主机的IP 虚拟主机和宿主机网络地址可以不一致 网卡：VMnet8 虚拟机的子网掩码、网关、DNS要与Vmnet8的网卡保持一致。 优点 虚拟主机不占用局域网IP地址 缺点 局域网内其它物理主机不能直接和虚拟主机通信 1.3 Host-only（仅主机模式） 虚拟主机只能和宿主机通信，不能访问外网 网卡：VMnet1 二 网络配置2.1 图形界面 nmtui 2.2 网卡配置文件 /etc/sysconfig/network-scripts/ifcfg-ens3212345678910TYPE=Ethernet # 网络类型 目前基本为以太网BOOTPROTO=none # 网络启动协议，如何让主机获得ipDEFROUTE=yes # 使用默认路由NAME=ens33 # 第一块网卡逻辑名称DEVICE=ens33 # 第一块网卡设备名称（物理名称）ONBOOT=yes # 网卡是否激活IPADDR=192.168.13.24 # 静态ip PREFIX=24 # 子网掩码GATEWAY=192.168.13.2 # 网关DNS1=223.5.5.5 # DNS BOOTPROTO dhcp 动态获取ip none, static 静态ip（手动配置） 2.3 其它配置文件 /etc/resolv.conf 系统DNS客户端的配置文件 每次重启网卡此文件DNS都会更新为网卡配置文件所配置的DNS /etc/hosts 系统本地的DNS解析文件 可以手动设置域名和IP绑定信息 首先使用本地设置的域名对应的ip，若没有设置，才使用所配置的DNS来解析域名 /etc/hostname 主机名配置文件 三 系统路由设置 配置 \\ 版本 CentOS 6 net-tools CentOS 7 iproute 静态默认路由 route add/del default gw 网关 ip route add/del default via 网关 静态网段路由 route add/del -net 目标网络地址 netmask 子网掩码 gw 网关 ip route add/del -net 目标网络地址 netmask 子网掩码 via 网关 静态主机路由 route add/del -host 目标主机地址 dev 网关 ip route add/del -host 目标主机地址 via 网关","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 软件","slug":"Linux-软件","date":"2020-03-29T03:04:04.000Z","updated":"2020-03-29T03:06:42.749Z","comments":true,"path":"2020/03/29/Linux-软件/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"一 软件包类型类型|说明|安装方式-|-源码包|源代码二进制包|编译安装rpm包|已编译过的二进制包|rpm 安装 / yum 安装 rpm 安装 安装时使用默认位置（大多数） rpm包之间存在依赖性 树形依赖 环形依赖 模块依赖 .so www.rpmfind.net 模块依赖查询 yum 安装 自动解决rpm的依赖性 二 源码包安装2.1 概述 可以自定义功能，安装时可以自定义路径 安装配置复杂，耗时 卸载方便（直接删除安装目录） 2.2 编译安装过程1 编译器（没有则安装） gcc yum -y install gcc gcc-c++ make zlib-devel pcre pcre-devel openssl-devel zlib：压缩库 pcre：支持正则表达式，地址重写rewrite openssl：提供https支持 2 下载源码包，解压并进入解压后目录3 软件配置和检查，生成 Makefile 文件 ./configure 定义需要的功能选项 检测系统环境是否符合安装要求 把定义好的功能选项和检测环境信息都写入Makefile文件，用于后续的编译 常见参数 --prefix=PATH 指定安装路径 --enable-ssl --disable-filter 启用禁用某项功能 --with-... 支持模块功能 4 按照 Makefile 文件编译 make 编译 make -j 4 指定4核心CPU编译，提升速度 make clean 清除make产生的文件 安装步骤之前，不会向安装位置写入任何文件，所以如果安装前有错误，执行make clean即可 5 按照 Makefile 定义的文件路径安装 make install 三 RPM（redhat package manager）3.1 概述 红帽软件包管理器 rpm通过将安装规则和源代码打包到一起，来降低软件的安装难度 3.2 rpm 操作1 查询 命令 说明 rpm -qa 查询所有已安装的软件包 rpm -q 包名 查询软件包是否安装 rpm -qi 包名 查询已安装软件包的详细信息 rpm -qip 全包名 查询未安装软件包的详细信息 rpm -ql 包名 查询已安装软件包中的文件列表 rpm -qlp 全包名 查询未安装软件包中的文件列表 rpm -qf file 查询文件属于哪个安装包 rpm -qR 包名 查询软件包的依赖性 rpm -qg group 查询组中的软件包列表 2 安装 rpm -ivh 包全名 -i, --install 安装 -v 显示详细信息 -h, --hash 显示进度 3 更新 rpm -Uvh 包名 -U, --upgrade 更新 4 卸载 rpm -e 包名 -e, --erase 卸载 5 校验 rpm -V 包名 -V 校验，对已经安装软件进行校验 检查包内容是否被修改，校验安全 校验信息 说明 S 文件大小是否改变 M 文件的类型或文件的权限（rwx）是否被改变 5 文件MD5校验和是否改变（可以看成文件内容是否改变） D 设备中的从代码是否改变 L 文件路径是否改变 U 文件的属主是否改变 G 文件的属组是否改变 T 文件的修改时间是否改变 四 Yum（Yellowdog Updater Modified）4.1 概述 yum通过将大量的常用rpm软件包放在一起，解决软件包之间的依赖关系，进一步降低软件的安装难度。 4.2 yum源1 配置基本 yum 源1 手撕配置文件 /etc/yum.repos.d/CentOS-Base.repo123456789[base] # 容器名称，唯一，区分不同yum源name= # 描述#mirrorlist= # 镜像站点，可以注释掉，和baseurl使用哪个都行#baseurl= # yum源服务器的地址。默认是CentOS官方的yum源服务器gpgcheck= # 公钥校验rpm包正确性 0不校验 1校验enabled= # 此yum源是否生效 0不生效 1或省略 生效gpgkey= # 公钥路径$releaseserver = `/etc/centos-release`$basearch = `*86_64` 2 从网络下载配置文件（手动下载，wget，curl …） wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo Aliyun mirror 2 配置扩展 yum 源 EPEL EPEL（Extra Packages for Enterprise Linux） 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS等提供高质量软件包的项目。 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 3 配置本地 yum 源 挂载光盘 备份默认本地 yum 源 /etc/yum.repos.d/CentOS-Media.repo 配置新 /etc/yum.repos.d/CentOS-Media.repo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485[CentOS 7]name=CentOS-serverbaseurl=file:///mnt/cdromenabled=1gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7``` ## 4.3 yum 操作### 1 软件包#### 1 查询命令|说明-|-`yum repolist`|查看可用的yum源信息`yum list [all]`|显示所有软件包`yum list available`|显示所有可安装的软件包`yum list installed`|显示所有已安装的软件包`yum list updates`|显示所有可更新的软件包`yum info 软件包名`|查看软件包信息`yum search keyword`|根据关键字搜索软件包`yum provides file`|查询文件的来源，属于哪个软件包#### 2 安装命令|说明-|-`yum install 软件包名`|安装指定软件包#### 3 更新命令|说明-|-`yum update`|更新所有可更新的软件包以及系统内核，保留旧包`yum upgrade`|更新所有可更新的软件包以及系统内核，删除旧包`yum update 软件包名`|更新指定软件包以及系统内核，保留旧包`yum upgrade 软件包名`|更新指定软件包以及系统内核，删除旧包#### 4 删除命令|说明-|-`yum remove 软件包名`|删除指定软件包`yum erase 软件包名`|删除指定软件包#### 5 缓存命令|说明-|-`yum makecache`|生成仓库软件索引表（类似字典索引）`yum clean all`|清除缓存#### 6 gpg key* 安装时如果 yum 源配置 `gpgkey=1` 会进行验证，缺少key会报错 1. 改为 `gpgkey=0` 2. `rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7` * 执行此命令导入 gpg key### 2 软件包组（软件包操作命令加上 group 即可）1. `yum grouplist [all]` * 显示所有软件包组2. `yum groupinstall 软件包组`3. `yum groupupdate 软件包组`4. `yum groupremove 软件包组`# 五 实例## 5.1 恶搞软件1. `cowsay` * 动物说2. `sl` * 火车## 5.2 JDK### 1 查询是否有安装1. `rpm -qa | grep java` * 查看是否安装有jdk * 如果是源码(.tar.gz)安装 查不出来2. `rpm -e 包名` 或 `yum remove 包名` * 卸载### 2 下载* [JDK download](https://www.oracle.com/cn/java/technologies/javase-downloads.html &quot;JDK 官网&quot;) * 下载 `.tar.gz` 压缩包（Linux Compressed Archive）### 3 安装1. 将 `.tar.gz` 压缩包上传至 Linux2. 解压到指定目录### 4 配置环境变量1. `/etc/profile` export JAVA_HOME=解压路径export PATH=$JAVA_HOME/bin:$PATH 123456789101112131415162. `source /etc/profile`3. `java -version`## 5.3 Tomcat### 1 概述* tomcat 依赖 java 环境### 2 下载* [Tomcat download](https://tomcat.apache.org/ &quot;tomcat 官网&quot;) * 下载 `.tar.gz`### 3 安装1. 将 `.tar.gz` 压缩包上传至 Linux2. 解压到指定目录### 4 如果未关闭防火墙，则需要开放 8080 端口 1 添加端口并设置永久生效firewall-cmd –zone=public –add-port=8080/tcp –permanent2 重载firewall-cmd –reload3 查看是否开放firewall-cmd –zone=public –query-port=8080/tcp 5 启动 / 关闭 basedir/bin/version.sh 查看 tomcat 版本信息 basedir/bin/startup.sh 启动 tomcat basedir/bin/shutdown.sh 关闭 tomcat","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 文件信息","slug":"Linux-文件信息","date":"2020-03-29T03:03:58.000Z","updated":"2020-03-29T03:07:01.505Z","comments":true,"path":"2020/03/29/Linux-文件信息/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/","excerpt":"","text":"一 文件信息133574978 -rw-------. 1 root root 1.5K Mar 25 15:10 anaconda-ks.cfg 文件属性（存储在文件的 inode 中） inode 编号 文件类型及权限 硬链接数 属主 属组 文件大小 最后修改时间 mtime 文件名（存储在父目录的 block 中） 二 inode &amp; block2.1 概述 存储设备格式化创建文件系统后，大致分为了两部分 inode 和 block inode 用来存储文件属性信息（元数据），不包括文件名 block 用来存储数据，文件名存储在父目录的 block 中 一个文件要占用一个 inode 和至少一个 block 2.2 inode1 概述 inode index 指向一个文件的 inode，是文件在文件系统中的唯一标识 文件名仅是为了方便人们的记忆和使用 修改文件会改变 inode，所以修改完服务器配置文件后，都需要重新加载一下配置文件 2 查看 inode 信息1 stat file 属性 说明 Inode inode 编号 Size 文件大小 Uid 文件属主 Gid 文件属组 Access 文件类型及权限 Links 链接数（硬链接） Blocks 数据块 block 数量 IO Block 每个数据块 block 大小 Device 存储该文件的设备号码 Access time atime，最后访问时间 Modify time mtime，文件内容最后修改时间 Change time ctime，inode 信息最后变动时间 2 df -i 查看 inode 使用情况 2.3 block 文件的 block 存储数据，目录的 block 存储目录下文件的文件名和 inode 的对应关系 一个文件可能占用多个 block，一个 block 的读写就消耗一次 I/O 一个 block 只能存放一个文件，如果 block 没有占满，剩余空间就浪费掉了 一个 block 默认大小为 4 k，可调整 如果存储文件较大，block 大点好，节省IO消耗 如果存储文件较小，block 小点好，提高磁盘利用率 三 文件类型3.1 查看文件类型 file [OPTION] FILE 查看文件类型及编码 OPTION -i 查看文件MIME类型及编码 -L 查看软链接文件时，查看的是软链接指向的目标文件的信息 3.2 文件类型分类 符号 说明 - 文件 d 目录 l 链接文件（软连接） s socket 文件（网路编程） b 块设备文件，（光驱 磁盘…）如/dev/sda c 字符设备文件，如 /dev/tty0，dev/null，dev/zero，dev/urandom p pipe 管道文件 1 - ASCII text 纯文本文件，可直接查看和编辑 binary 二进制文件（命令文件），不可以编辑 data 数据文件（压缩文件） 2 c /dev/null “空”设备（黑洞文件） 读 什么内容也读取不到 写 写入的内容会永远丢失 /dev/zero “零”设备 读 读取时提供无限的空字符（NULL， ASCII NUL，0x00） 典型用法是用它来产生一个特定大小的空白文件 写 写入的内容会永远丢失 /dev/urandom 伪随机数生成器 四 链接4.1 硬链接（Hard Link）1 概述 Linux 允许同一个 inode 对应多个文件名，多个文件指向同一个 inode 就是硬链接 不能对目录进行创建，只能对已存在的文件创建硬链接 同一个分区 inode 是唯一的，不能跨文件系统或者跨分区进行硬链接的创建 硬链接与原文件都拥有相同的 inode 和 block 删除一个硬链接不会影响原文件，只有文件的硬链接数为 0 ，文件才会被真正的删除 每个目录下包含两个隐藏项 . 当前目录的硬链接 .. 父目录的硬链接 链接数 文件的硬链接数 = 1（文件本身）+ n（硬链接数） 目录的硬链接数 = 1（目录本身）+ 1（.）+ n（子目录数..） 2 创建硬链接 ln 目标文件 硬链接文件 4.2 软连接（Symbolic Link）1 概述 软连接文件中存储的是另一个文件的指针，类似于快捷方式 软链接有自己 inode 和 block 可对目录或文件（包括不存在的）创建软链接 软链接可跨文件系统和分区 删除原文件相关软连接会变成死链接 2 创建软连接 ln -s 目标文件 软链接文件 软连接文件 -&gt; 目标文件 五 权限5.1 基本权限1 基本权限说明权限|二进制|八进制|文件|目录-|-|-|-r|100|4|读取文件内容|查看目录中的内容（ls）w|010|2|编辑文件内容|在目录中操作（touch mkdir rm cp mv）x|001|1|执行文件|进入目录（cd） 2 文件 权限 属主（root） 属主（普通用户） 其它人（root） 其它人（普通用户） --- 读 写 - 读 写 - r-- 读 写 读 读 写 读 -w- 读 写 写 读 写 写 --x 读 写 执行 - 读 写 执行 - r-x 读 写 执行 读 执行 读 写 执行 读 执行 1. root 对所有文件可读写，执行需要有执行权限 1. 读写：任意权限 2. 执行：x 2. 普通用户读写文件需要有相应权限，执行需要有 读 + 执行权限 1. 读：r 2. 写：w 3. 执行：rx 3. 通常文件权限需要有 r 3 目录 权限 属主（root） 属主（普通用户） 其它人（root） 其它人（普通用户） --- 读 写 执行 - 读 写 执行 - r-- 读 写 执行 读（只有文件名，没有文件属性信息） 读 写 执行 读（只有文件名，没有文件属性信息） -w- 读 写 执行 - 读 写 执行 - --x 读 写 执行 执行 读 写 执行 执行 r-x 读 写 执行 读 执行 读 写 执行 读 执行 -wx 读 写 执行 写 执行 读 写 执行 写 执行 1. root 对所有目录可读、写、执行 2. 普通用户对目录的读写需要 读写权限 + 执行权限 1. 读：rx 2. 写：rx 3. 执行：x 3. 通常目录权限需要有 x 4 umask &amp; 默认权限1 umask1 命令 umask 查看umask值，root 默认 0022，普通用户默认 0002 第一位是特殊权限，后三位是基本权限 rwx umask -S 以rwx形式查看umask值 umask 值 临时修改umask值 2 umask 和 默认权限的计算 没有umask时，文件的默认权限是 0666，目录的默认权限是 0777 有umask时，文件和目录默认权限简单算法（不严谨） 文件默认权限 = 666 - umask 目录默认权限 = 777 - umask 有umask时，文件和目录默认权限科学算法 将默认权限（目录777，文件666）和 umask 值转为 2 进制 对 umask 2 进制值取反 将默认权限和umask取反后的值进行与运算 &amp; 将二进制结果转为八进制，即为默认权限 2 默认权限 root 文件默认权限为 644 rw-r--r-- 目录默认权限为 755 rwxr-xr-x 普通用户 文件默认权限为 664 rw-rw--r-- 目录默认权限为 775 rwxrwxr-x 5.2 特殊权限1 SUID（set uid）（4）1 概述 SUID 权限仅对可执行二进制文件有效，目录没有意义 SUID 权限只有在该命令文件执行过程中有效 执行者必须对文件有可执行权限 命令文件执行时，执行者可以拥有文件属主的权限 总结：SUID 即将文件属主的权限分配给所有可执行此文件的人 2 例123---------- 1 root root /etc/shadow-rwsr-xr-x. 1 root root /usr/bin/passwd-rwxr-xr-x. 1 root root /usr/bin/cat 执行 passwd 命令修改密码其实最终要修改 /etc/shadow，而只有 root 可以读写 /etc/shadow 文件 普通用户执行 passwd 命令能成功的原因 普通用户对 passwd 命令有执行权限 passwd 命令有SUID权限，所以在执行时普通用户拥有了 passwd 属主 root 的权限 cat 命令没有SUID权限，所以普通用户无法通过 cat 查看 /etc/shadow 3 添加 SUID chmod u+s FILE chmod 4xxx FILE （xxx 为普通权限） 设置SUID之后，属主权限的显示 属主有 x 权限，则 x → s 属主无 x 权限，则 - → S 4 删除 SUID chmod u-s FILE chmod xxx FILE（去掉 4 即可） 2 SGID（set gid）（2）1 概述 文件 可执行二进制文件 SGID 权限只有在该命令文件执行过程中有效 执行者必须对文件有可执行权限 命令文件执行时，执行者可以拥有文件属组的权限 总结：SGID 即将文件属组的权限分配给所有可执行此文件的人 目录 普通用户在此目录中的有效组会变成此目录的属组 在此目录中新建文件或目录的属组为该目录的属组 2 例12-rwx--s--x 1 root slocate /usr/bin/locate-rw-r----- 1 root slocate /var/lib/mlocate/mlocate.db 执行 locate 命令需要读取 /var/lib/mlocate/mlocate.db 文件，而普通用户是没有读取此文件的权限的 普通用户执行 locate 命令能成功的原因 普通用户对 locate 命令有执行权限 locate 命令有 SGID 权限，所以在执行时普通用户拥有了 locate 属组 slocate 的权限，而 slocate 对 mlocate.db 文件是可读的 3 添加 SGID chmod g+s FILE chmod 2xxx FILE 设置SGID之后，属组权限的显示 属组有 x 权限，则 x → s 属组无 x 权限，则 - → S 4 删除 SGID chmod g-s FILE chmod xxx FILE 3 SBIT（sticky bit）（1）1 概述 粘滞位权限只对目录有效 如果一个用户对目录有 wx 权限，则意味着此用户可以删除目录下的所有文件（包含其它用户创建的文件） 若一个目录设置了 SBIT 权限，则在此目录下的文件只有 root 和 属主才可以删除或移动。 2 例1drwxrwxrwt. 19 root root /tmp 所有用户对 /tmp 目录都拥有完整权限，但普通用户却不能在 /tmp 下随意操作不属于自己的文件，是因为/tmp 设置了 SBIT 权限 3 添加 SBIT chmod o+t DIR chmod 1xxx DIR 设置SBIT后，其它人权限的显示 其它人有 x 权限，则 x → t 其它人无 x 权限，则 x → T 4 删除 SBID chmod o-t DIR chmod xxx DIR 5.3 权限管理命令1 chmod（change file mode bits） chmod [OPTION] mode file 修改文件权限（只有 root 和属主能改变文件的权限） OPTION -R 递归设置 mode {ugoa} {+-=} {rwx} u=属主 g=属组 o=其它人 a=ugo 八进制数字组合 如 755 ,644 ... 2 chown（change file owner and group） chown [option] [OWNER][:[GROUP]] file 修改文件的属主和属组 只有 root 可以修改文件的属主 属主（非root）只能修改文件的属组，且修改后的属组必须还是属主所在组 option -R 递归修改 5.4 最大有效权限 mask mask 的默认权限是 rwx，通常不会修改 文件上的除了属主外的权限（属组/其它人/ACL）都需要和 mask 权限作“与”运算，才能得到真正的权限 如设置的非属主权限是 r-x，则 r-x &amp; rwx = r-x 5.5 ACL（Access Control List）1 概述 访问控制列表 在普通权限中，用户对文件只有三种身份，属主、属组和其他人，但实际中只有这三个身份不太够用。 当用户对文件的权限与属主、属组和其它人这三种身份的权限都不相同时，就需要单独为用户分配权限，这就是 ACL 权限 文件权限信息最后的 . 就代表 ACL 权限 . 无 ACL 权限 + 有 ACL 权限 2 ACL 权限管理1 setfacl（set file access control lists） setfacl [OPTION] FILE OPTION -m, --modify 设置 acl 权限 -d, --default 设置默认 acl 权限 只对目录生效，目录中新建立的文件都拥有此默认权限 -k, --remove-default 删除默认 acl 权限 -x, --remove 删除指定 acl 权限 -b, --remove-all 删除所有 acl 权限 -R, --recursive 递归设置 acl 权限 设定的 acl 权限会对目录下的所有子文件生效（新建文件不生效） 2 查看 ACL 权限 getfacl FILE 3 增加 ACL 权限 setfacl -m m:权限 FILE 设置最大有效权限 mask setfacl -m u:用户名:权限 FILE 为某个用户设置acl权限 setfacl -m g:组名:权限 FILE 为某个组设置acl权限 setfacl -m d:u:用户名:权限 DIR 对目录设置默认acl权限 setfacl -m u:用户名:权限 DIR 对目录递归设置acl权限 4 删除 ACL 权限 setfacl -x u:用户名 FILE 删除用户的acl权限 setfacl -x g:组名 FILE 删除组的acl权限 setfacl -b FILE 删除文件所有的acl权限 seffacl -k DIR 删除目录默认的acl权限 5.6 文件扩展属性（隐藏属性）1 chattr（change file attributes on a Linux file system） chattr {+-=} [属性] FILE 修改文件或目录的隐藏属性（仅 root 可用） + 增加属性 - 删除属性 = 设置属性 属性 文件 目录 i（immutable） 不允许任何修改 可以修改目录下文件数据，不能新建和删除文件 a（append only） 可以给文件添加数据，不能修改和删除数据 可以修改目录下文件数据以及新建文件，不能删除文件 2 lsattr（list file attributes on a Linux second extended file system） lsattr [OPTION] [FILE] 查看文件或目录的隐藏属性 OPTION -a 若没有指定文件，则显示所有文件和目录 -d 若目标是目录，仅列出目录本身隐藏属性","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 磁盘","slug":"Linux-磁盘","date":"2020-03-29T03:03:51.000Z","updated":"2020-03-29T03:07:24.333Z","comments":true,"path":"2020/03/29/Linux-磁盘/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%A3%81%E7%9B%98/","excerpt":"","text":"一 磁盘接口分类 类型 说明 使用 SAS Serial Attached SCSI 服务器 SATA Serial ATA 个人电脑 SSD Solid State Disk 服务器，个人电脑 SCSI Small Computer System Interface @declared IDE Integrated Drive Electronics @declared 二 磁盘物理结构2.1 外部结构 磁盘主轴 决定磁盘转速（rpm-round per minute） 磁盘盘片 用于存储数据 磁盘磁头（Head） 用于读取数据 每个盘面都有一个磁头 磁头数 = 盘面数 = 盘片 * 2 磁盘接口 用于连接主板，用于连接阵列卡 2.2 内部结构 磁道（Track） 盘面中一圈圈的同心圆称为磁道 每个盘面都被划分为数目相等的磁道，由外向内从 0 开始编号 柱面（Cylinder） 不同盘面上编号相同的磁道形成一个圆柱就叫做柱面 磁头在每个盘面上的都是一起移动的，所在磁道编号都相同，所以数据的读写以及磁盘分区都是按柱面进行的 柱面数 = 任意一个盘面的磁道数 单元块（Units） 单个柱面的大小 扇区（Sector） 磁道被直径划分为若干个弧段，每个弧段称为一个扇区，从1开始编号 扇区是磁盘存储的最小单位，通常是512字节 簇（Clust）/ 块（Block） 操作系统读取磁盘时，一个扇区一个扇区的读，效率太低，会一次性读取多个扇区，多个扇区就叫簇（windows）/ 块（linux） 簇 / 块 是文件系统存储的最小单位 2.3 磁盘容量 磁盘容量 = 磁头数(盘面数) × 每面磁道数(柱面数) × 每道扇区数 × 每扇区字节数(512byte) 三 RAID（Redundant Array of Independent Disks）3.1 概述 独立冗余磁盘阵列 把好几块硬盘通过一定组合方式把它组合起来，成为一个新的硬盘阵列组，从而使它能够达到高性能硬盘的要求 3.2 作用 提高磁盘存储效率 提高I/O速度，提供了数据并发性 提高磁盘存储安全 数据冗余（备份），数据校验 提高磁盘存储容量 扩充容量 3.3 RAID 级别（整合方式） raid 0 多块盘整合在一起，全部用作存储 可用容量为所有盘容量之和，性能高 没有冗余，有一块盘坏则整个raid 0 就坏，数据会丢失 raid 1 两块盘整合在一起，一个盘存储，一个盘备份 可用容量为一个盘，性能底 冗余100%，一块盘坏了数据也不会丢失 raid 5 至少有三个盘，一次只有两块盘存储，另一个盘作奇偶校验 容量为两个盘的容量，性能高 如果只有一块盘坏了，可以根据另外两块盘推算出这块盘的数据 raid 10 两个盘形成一个raid 1，然后两个raid 1形成一个raid 0 RAID 各级别比较 冗余 RAID 1 &gt; RAID 10 &gt; RAID 5 &gt; RAID 0 性能 RAID 0 &gt; RAID 10 &gt; RAID 5 &gt; RAID 1 成本 RAID 10 &gt; RAID 1 &gt; RAID 5 &gt; RAID 0 四 LVM（Logical Volume Manager）4.1 概述 逻辑卷管理器 实现分区的弹性扩容或缩容，逻辑卷通过命令可以从卷组中获取容量或者将容量返回给卷组 4.2 概念 物理卷 PV（Physical Volume） 物理卷是 LVM 的基本存储逻辑块，可以是分区、磁盘或Raid PE（physical extents） 物理卷中可以分配的最小存储单元，PE的大小是可以指定的，默认为4MB 卷组 VG（Volume Group） 一个卷组由一个或多个物理卷组成 逻辑卷 LV（Logical Volume） 逻辑卷建立在卷组之上，逻辑卷上可以建立文件系统，类似与其它硬盘的分区概念 LE（logical extent） 逻辑卷中可以分配的最小存储单元，在同一个卷组中，LE的大小和PE是相同的，并且一一对应 五 磁盘分区5.1 系统启动引导记录1 MBR（Master Boot Record） 用于引导磁盘空间小于2T 磁盘的 0 磁头、0 磁道、1 扇区 （512 bytes） 主引导程序（BootLoader）（446 bytes） 磁盘分区表DPT（Disk Partition table）（64 bytes） 1 个分区占16 bytes，所以最多有 4 个分区 分区有效(结束)标志（magic number）（2 bytes 55AA） 2 GPT 用于引导磁盘空间大于2T 5.2 分区概述1 Linux 磁盘和分区的命名规则 磁盘种类 磁盘命名 分区命名 SAS SATA SCSI 第一块：sda第二块：sdb… sda1 sda2 ...sdb1 sdb2 ... IDE 第一块：hda第二块：hdb… hda1 hda2 ...hdb1 hdb2 ... 2 分区说明 分区 编号 说明 主分区（Primary） 1 ~ 4 至少有 1 个，至多有 4 个 扩展分区（Extend） 1 ~ 4 至多有 1 个 逻辑分区（Logical） 5+ 由扩展分区划分成一个个逻辑分区 1. 真正存放数据的是主分区和逻辑分区，大量数据都放在逻辑分区中 2. 扩展分区可以理解为一个概念，用来划分逻辑分区用的，可以使用 1 ~ 4 任意一个编号 3 分区方式 1~4 个 主分区 磁盘：sda 主分区：sda1 sda2 sda3 sda4（数量任意） 1~3 个 主分区 + 1 个扩展分区（分成 n 个逻辑分区） 磁盘：sda 主分区：sda1 sda2 sda3（数量任意） 扩展分区：sda4（编号 1 ~ 4 任意，不与主分区重复即可） 逻辑分区：sda5 sda6 ... 4 分区方案1 普通分区方式 /boot 引导分区，256Mb swap 交换分区，把内存中暂时不用的数据临时存放到硬盘中，以腾出物理内存空间供给更活跃的程序服务来使用，目的是为了解决真实物理内存不足 内存 &gt; 8G，swap = 8G，内存 &lt; 8G，swap = 内存 * 1.5 / 根分区，剩余大小 2 存储服务器分区方式 /boot swap / 20G~200G /data 剩余大小，data 名称可自定义 3 灵活分区方式 /boot swap / 20G~200G 剩余保留，以后哪个部门使用，就分出相应的分区。 5.3 分区操作1 fdisk（manipulate disk partition table） fdisk -l [device] 查看磁盘及其分区表信息 fdisk device 分区（交互式操作），有默认值时直接回车代表使用默认值 交互命令 说明 n 创建分区 d 删除分区 p 显示分区表 q 不保存退出 w 将分区信息写入分区表，即保存退出 l 显示分区类型与分区类型id对照表，如 83:linux，8e:linux LVM t 改变分区类型 u 改变分区的方式（是否按照扇区进行划分） g 创建一个新的空的 GPT 分区表 2 parted parted device 用来划分容量大于2T的磁盘（交互式操作） 交互命令 说明 mklabel 创建一个分区表（默认为MBR） mklabel gpt 修改分区表为GPT print 显示分区表 mkpart PART-TYPE [FS-TYPE] START END 创建分区（立即生效） rm NUMBER 根据编号删除分区 quit 退出 3 partprobe partprobe [device] 重新读取分区表信息 分区完成之后，要执行此命令让系统识别分区文件 六 格式化6.1 概述 格式化用来创建文件系统 文件系统 xfs CentOS 7 ext3/4 CentOS 6 6.2 格式化操作mkfs（make file system） mkfs -t type device type 文件系统类型，如 xfs ext4 ... mkfs.type device 七 挂载7.1 概述 Linux中的存储设备（磁盘、光盘…）是不能直接访问的，需要将一个目录与一个存储设备相关联，通过关联目录访问存储设备中的数据。 将目录与存储设备关联的动作叫做 挂载 与存储设备关联的目录叫做 挂载点。 装完Linux系统后，能直接访问磁盘，是因为系统根据我们对磁盘的分区信息及顺序与指定目录进行了挂载，如：1234分区 挂载点/dev/sda1 /boot/dev/sda2 swap/dev/sda3 / 磁盘的使用 分区（可选）→ 格式化 → 挂载 7.2 挂载操作1 查 mount [-l] 显示系统中已经挂载的设备， -l 会显示卷标名称 2 挂载 mount [-t 文件系统] [-L 卷标名] [-o 挂载参数] 设备文件名 挂载点 临时挂载设备，重启失效 3 卸载挂载 umount 挂载点|设备文件 4 开机自动挂载1 使用开机自启动配置文件 /etc/rc.local -&gt; /etc/rc.d/rc.local 在此系统开机自启动配置文件，配置挂载命令，即可实现开机自动挂载 注意要给 /etc/rc.d/rc.local 赋予执行权限 2 使用挂载配置文件 /etc/fstab1234UUID=13ba788b-e881-484b-865f-2adc27ded83c / xfs defaults 0 0UUID=a347b25e-b9a2-4dee-bd26-7d4214c4959b /boot xfs defaults 0 0UUID=fbb8a2df-84b3-441f-a511-0760f45c9584 swap swap defaults 0 0设备/设备UUID 挂载点 文件系统类型 挂载参数 是否备份 是否自检 blkid 查看设备的名称、文件系统类型、UUID、LABEL等信息 mount -a 检查 /etc/fstab 文件中挂载的设备文件有无疏漏，若有，则进行挂载 5 不同设备的挂载 挂载硬盘分区 mount [-t xfs] /dev/分区名 挂载点 挂载U盘 mount [-t vfat] /dev/设备号 挂载点 U盘和硬盘一样，设备号不固定，先使用 fdisk -l 查询设备号 挂载光盘 mount [-t iso9660] {/dev/sr0 | /dev/cdrom} 挂载点 /dev/cdrom 是 /dev/sr0 的软连接 八 问题8.1 磁盘空间不足（no space left on device） block 存储空间不足 原因：存储数据过多 解决：删除没用数据 inode 数量不足 原因：大量小文件占用 inode 解决：删除大量的没用小文件 8.2 调整 swap 分区大小 从磁盘分出一部分空间（创建一个空文件 FILE） dd if=/etc/zero of=DIR bs= count= mkswap FILE 把文件作为 swap 空间使用 swapon FILE 激活扩展的 swap 空间 swapoff FILE 取消扩展的 swap 空间","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 用户管理","slug":"Linux-用户管理","date":"2020-03-29T03:03:41.000Z","updated":"2020-03-29T03:07:55.576Z","comments":true,"path":"2020/03/29/Linux-用户管理/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"一 用户分类UID|用户|说明|例-|-0|超级管理员|root 不一定是超级管理员，uid=0 的一定是超级管理员|root1~999|系统用户（虚拟用户）|用于维持、管理某个服务正常运行，不能登录且没有家目录，不能删除|nobody1000+|普通用户|管理指定数据，可以管理指定进程，可以登录|自定义 二 配置文件2.1 用户信息 /etc/passwd12345678root: x: 0: 0: root: /root: /bin/bash1 用户名:2 用户密码占位符（x表示有密码）:3 用户Uid:4 用户Gid:5 用户描述信息:6 用户家目录:7 用户登录后使用的shell: 2.2 用户密码信息，仅 root 可读 /etc/shadow12345678910root: $6$SlHDoVNtoeyDU/3w$y.ap.le40W39OROwHTk2xJnjDUbIcXX9GcAOOQA3k6yteiu9Xq9XyZzB8U/GbNzFSZ3LoC4q6Pazh806WZaKL0: : 0: 99999: 7: : :1 用户名：2 密码（加密）：3 密码最后修改时间：表示账号在1970-01-01之后的第 n 天修改的密码4 密码最小修改时间间隔：表示密码修改之后隔多久可以再次修改5 密码有效期：表示密码修改之后有效期限，超过期限会过期，必须重新修改6 密码过期前警告天数：默认为7，表示密码过期前7天会发送警告信息7 密码过期后宽限天数：8 账号失效时间：表示账号在1970-01-01之后的 n 天内有效，超过则失效9 保留字段： 2.3 用户组信息 /etc/group12345root: x: 0:1 组名：2 组密码占位符（x表示有密码）：3 组id（Gid）：4 组附加用户：即如果组是用户的初始组，则不显示此用户，只显示组中其它用户 2.4 用户组密码信息 /etc/gshadow12345root: : :1 组名：2 组密码：空表示没有组密码，`!` 表示没有组密码也没有组管理员3 组管理员：4 组附加用户： 2.5 用户模板目录 /etc/skel/12345# 添加用户时，此目录中文件会自动存入用户家目录.bash_logout # 退出登录时执行.bash_profile.bashrc.viminfo # vim文件模板 2.6 用户邮件目录 /var/spool/mail/用户名/ 2.7 新建用户配置文件 /etc/default/useradd 创建用户时的默认值 /etc/login.defs 用于在创建用户时，对用户的一些基本属性做默认设置，例如指定用户 UID 和 GID 的范围，用户的过期时间，密码的最大长度，等等 三 用户管理3.1 查1 id（print real and effective user and group IDs） id [OPTION] [USER] 显示用户 uid gid gids，默认为显示当前用户 OPTION -u, --user 显示用户 uid -g, --group 显示用户 gid -G, --groups 显示用户所有所在组的 gid -n, --name 与 u g G 一起使用显示名称而不是id 2 w（Show who is logged on and what they are doing） w 显示登录用户信息及负载信息 3 who（show who is logged on） who 显示登录用户信息 4 whoami whoami 显示当前登录用户名 5 last last 查看系统的所有登录信息 last 命令默认读取 /var/log/wtmp 日志，这是一个二进制文件 6 lastlog lastlog [-u UID] 查看用户最后一次登录系统的信息 lastlog 命令默认读取 /var/log/lastlog 日志，这是一个二进制文件 3.2 增1 useradd（create a new user or update default new user information） useradd [OPTION] username OPTION -u, --uid UID 指定Uid -g, --gid GROUP 指定用户初始组（组必须存在），且不会创建默认同名组。 默认会创建一个与用户名相同的初始组。 -G, --groups GROUP1[,GROUP2,...[,GROUPN]]] 指定用户附加组 -s, --shell SHELL 指定SHELL，默认为 /bin/bash -c, --comment COMMENT 用户描述信息 -d, --home-dir HOME_DIR 指定用户家目录 默认的用户家目录为 /home/username -M, --no-create-home 不创建家目录 -N, --no-user-group 不创建与用户同名的初始组 2 passwd（update user’s authentication tokens） passwd [OPTION] [USER] 修改用户密码（默认交互式） OPTION -S 查询用户密码状态（仅 root 可用） -l, --lock 锁定用户。会在/etc/shadow 中指定用户的密码前添加 !，使密码失效（仅 root 可用） -u, --unlock 解锁用户（仅 root 可用） --stdin 接收标准输入（如管道）的数据作为密码（非交互式） echo 密码 | passwd --stdin 用户 3.3 删1 userdel（delete a user account and related files） userdel [OPTION] USER 删除用户 实际就是从/etc/passwd shadow group gshadow 中删除用户信息 用户个人文件（家目录和邮件目录）默认会保留 OPTION -r, --remove 删除用户及个人文件 3.4 改1 usermod（modify a user account） usermod [OPTION] [USER] 修改用户信息 OPTION -u UID 修改用户uid -g GROUP 修改用户初始组 -G GROUPS 修改用户附加组 -c COMMENT 修改用户说明 -s SHELL 修改用户Shell -d HOME__DIR 修改用户家目录 -l USERNAME 修改用户名，注意修改家目录名和邮箱名以保持同步 -L 临时锁定用户 -U 解锁用户 2 chage（change user password expiry information） chage [OPTION] [USER] 修改用户密码信息 OPTION -l, --list 列出用户的详细密码状态 -d LAST_DAY 修改密码最后更改日期 0 用户一登陆就要修改密码 -m MIN_DAYS 修改两次密码最小修改间隔 -M MAX_DAYS 修改密码的有效期 -W WARM_DAYS 修改密码到期前的警告天数 -I DAYS 修改密码过期后的宽限天数 -E EXPIRE_DATE 修改账号失效时间 3.5 用户切换1 su su [OPTION] USER 普通用户切换至其它用户需要密码，root 切换至其它用户不需要密码 OPTION - 不加 - ，只有部分环境变量会变 加 -，表示完全切换用户，环境变量会随之改变 -c command 仅切换用户执行一次命令，执行后自动切换回来 2 sudo（execute a command as another user）1 概述 sudo 是一种权限管理机制 管理员可以授权普通用户以其它身份执行一些命令 2 授权方式 /etc/sudoers 直接修改此配置文件 visudo 等效于 vim /etc/sudoers，有语法检查（推荐） 3 配置 /etc/sudoers12345678# 1 语法授权的`用户` 主机地址=(可使用的身份 授权命令绝对路径列表授权的`%组` 主机地址=(可使用的身份 授权命令绝对路径列表# 2 例子root ALL=(ALL) ALL --- 表示root用户可以在任意主机上以任意身份执行任意命令an3 ALL=(ALL) /usr/bin/cat, /usr/bin/less --- 表示an3用户可以在任意主机上以任意身份执行cat和lessan3 ALL=(ALL) /usr/sbin/*, !/usr/sbin/visudo --- 表示 an3 用户可以在任意主机上以任意身份执行 /usr/sbin/ 下的所有命令，但排除 visudo 命令an3 ALL=(ALL) NOPASSWD: /usr/sbin/*, !/usr/sbin/visudo --- NOPASSWD：表示在使用sudo执行命令时不需要输入密码 4 使用 sudo -l 查看当前用户 sudo 可用的命令 sudo command 以管理员身份执行命令 四 用户组管理4.1 groupadd（create a new group） groupadd [OPTION] GROUP 创建用户组 OPTION -g, --gid GID 指定gid 4.2 groupdel（delete a group） groupdel GROUP 删除组 如果组是某个用户的初始组，则不能删除 4.3 groupmod groupmod [OPTION] GROUP 修改组 -g GID 修改gid -n NEW_NAME 修改组名 4.4 gpasswd gpasswd [OPTION] GROUP -A USER 将用户设置为组管理员 -a, --add USER 把用户加入组 -d --delete USER 把用户从组中删除","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 服务","slug":"Linux-服务","date":"2020-03-29T03:03:33.000Z","updated":"2020-03-29T03:07:37.025Z","comments":true,"path":"2020/03/29/Linux-服务/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"一 防火墙（firewalld）1.1 操作操作\\服务名|firewalld（CentOS 7）|iptables（CentOS 6）-|-查看状态|systemctl status firewalld|/etc/init.d/iptables status开启|systemctl start firewalld|/etc/init.d/iptables start关闭|systemctl stop firewalld|/etc/init.d/iptables stop开机启动|systemctl enable firewalld|chkconfig iptables on开机不启动|systemctl disable firewalld|chkconfig iptables off 1.2 配置（firewall-cmd） firewall-cmd --zone=public --list-ports 查看所有已经开放的端口 --zone 作用域 firewall-cmd --zone=public --query-port=端口/协议 查看某个端口是否开放 firewall-cmd [--permanent] --zone=public --add-port=端口/协议 开放端口 --permanent 永久生效，没此参数重启后失效 firewall-cmd [--permanent] --zone=public --remove-port=端口/协议 删除端口 firewall-cmd --reload 重载防火墙规则 二 远程连接服务（sshd）2.1 SSH（Secure Shell Protocol） SSH 加密传输，安全 Telnet 明文传输，不安全 openssh 服务端软件，ssh 协议的开源实现，CentOS默认安装 openssl 连接和传输过程中加密软件 2.2 连接方式1 基于密码的远程连接 公钥和私钥只用来完成数据加密 服务器发送公钥给客户端 客户端使用公钥对密码加密后回传给服务器，服务器解密验证密码 2 基于密钥的远程连接 在客户端创建密钥对 ssh-keygen -t rsa -t 指定密钥加密类型 命令会在 ~/.ssh/ 生成三个文件 id_rsa 私钥 id_rsa.pub 公钥 known hosts 客户端把公钥发送给服务端 ssh-copy-id -i 公钥路径 目标IP 手动上传 服务端将公钥存在 ~/.ssh/authorized_keys 权限 600 2.3 配置文件 /etc/ssh/ssh_config（客户端配置文件） /etc/ssh/sshd_config（服务端配置文件）123456789101112131415161718 17 #Port 22 # 配置端口 默认22 19 #ListenAddress 0.0.0.0 # 指定的网卡才能够接收远程访问请求，默认所有网卡都可以接收 22 HostKey /etc/ssh/ssh_host_rsa_key # 私钥位置 23 #HostKey /etc/ssh/ssh_host_dsa_key 24 HostKey /etc/ssh/ssh_host_ecdsa_key 25 HostKey /etc/ssh/ssh_host_ed25519_key 32 SyslogFacility AUTHPRIV # 日志记录ssh登录信息 33 #LogLevel INFO # 日志等级 38 #PermitRootLogin yes # 是否允许root远程连接 43 #PubkeyAuthentication yes # 是否开启公钥验证 47 AuthorizedKeysFile .ssh/authorized_keys # 公钥位置 65 PasswordAuthentication yes # 是否允许基于密码远程连接 64 #PermitEmptyPasswords no # 是否允许空密码用户远程连接 79 GSSAPIAuthentication yes # GSSAPI认证是否开启（关闭）116 #UseDNS yes # 是否开启反向DNS解析功能（关闭） 2.4 SSH 相关命令 ssh [-p port] [USER@]remote 连接 ssh-keygen 用于生成密钥对 ssh-copy-id 用于复制公钥到服务器 三 网络服务（network）","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 系统管理","slug":"Linux-系统管理","date":"2020-03-29T03:03:21.000Z","updated":"2020-03-29T03:08:13.868Z","comments":true,"path":"2020/03/29/Linux-系统管理/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/","excerpt":"","text":"一 Systemd1.1 概述 Systemd 是一系列工具的集合，用于取代System V初始进程 Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位） Systemd 取代 init 成为系统中 PID 值为 1 的进程 1.2 命令1 systemctl Systemd 的主命令，用于管理系统 2 systemd-analyze 命令 说明 systemd-analyze 查看启动耗时 systemd-analyze blame 查看每个服务的启动耗时 3 hostnamectl 命令 说明 hostnamectl 显示当前主机的信息 hostnamectl set-hostname xxx 设置主机名 4 localectl 命令 说明 localectl 查看本地化设置 localectl set-locale en_US.UTF-8 设置字符集 localectl set-keymap us 设置键盘映射 localectl set-layout us 设置 x11 布局 5 timedatectl 命令 说明 timedatectl 查看时间及时区信息 timedatectl list-timezones 显示所有可用的时区 timedatectl set-timezone Asia/Shanghai 设置时区 6 loginctl 命令 说明 loginctl list-sessions 显示当前所有连接会话 loginctl list-users 列出当前所有登录用户 loginctl show-user root 显示指定用户的信息 7 journalctl 管理所有 Unit 的启动日志 日志的配置文件是 /etc/systemd/journald.conf 1.3 Unit1 概述 Unit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit 每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit Systemd 默认从目录 /etc/systemd/system/ 读取配置文件。但里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录 2 分类类型|扩展名|说明-|-Service unit|.service|系统服务Target unit|.target|对 Unit 文件进行逻辑分组，多个 Unit 构成的一个 TargetDevice unit|.device|硬件设备Mount unit|.mount|文件系统挂载点，可代替/etc/fstabAutomount unit|.automount|自动挂载点Socket unit|.socket|进程间通信的socketPath unit|.path|文件或路径Scope unit|.scope|不是由Systemd启动的外部进程Slice unit|.slice|进程组Snapshot unit|.snapshot|Systemd快照，可以切回某个快照Swap unit|.swap|swap 文件Timer unit|.timer|定时器 3 Unit 状态1 Loaded（下次开机启动状态） 状态 说明 enabled 开机启动 disabled 开机不启动 static 不能自己启动，但有可能作为依赖被其它 enabled 服务启动 mask 禁止启动 2 Active（当前状态） 状态 说明 active（running） 持续运行 active（exited） 仅执行一次就正常结束的服务 active（waiting） 运行中，但要等待其它事件 inactive 没有运行 4 Unit 管理1 查 命令 说明 systemctl list-units 显示所有正在运行的 Unit systemctl list-units --all 显示所有Unit，包括没有找到配置文件的或者启动失败的 systemctl list-units --all --state=inactive 显示所有没有运行的 Unit systemctl list-units --failed 显示所有加载失败的 Unit systemctl list-units --type=service 显示所有正在运行的、类型为 service 的 Unit systemctl list-unit-files 显示所有配置文件 systemctl list-unit-files --type=service 显示指定类型的配置文件 2 依赖关系 命令 说明 systemctl list-dependencies name.service 显示某个 Unit 的所有依赖 systemctl list-dependencies -all name.service 展开显示某个 Unit 的所有依赖 3 常用操作（以 service 为例） 操作\\版本 CentOS 7 CentOS 6 启动服务 systemctl start name.service service name start 关闭服务 systemctl stop name.service service name stop 重启服务 systemctl restart name.service service name restart 查看服务状态 systemctl status name.service service name status 开机启动 systemctl enable name.service chkconfig name on 开机不启动 systemctl disable name.service chkconfig name off 是否启动 systemctl is-active name.service 是否开机启动 systemctl is-enabled name.service 重载某个配置文件 systemctl reload name.service 重载所有修改过的配置文件 systemctl daemon-reload 杀死服务所有子进程 systemctl kill name.service 1.4 Target1 概述 启动系统时，需要启动大量的 Unit，非常不方便 Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit System V 启动模式的 Runlevel 与 Target 作用类似，不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动 2 运行级别 &amp; TargetCentOS 6|CentOS 7| 说明—|—Runlevel 0 | runlevel0.target -&gt; poweroff.target|关机模式，系统默认运行级别不能设置为0，否则不能正常启动Runlevel 1 | runlevel1.target -&gt; rescue.target|单用户模式，root权限，用于系统维护，修改root密码等等，禁止远程登陆Runlevel 2 |runlevel2.target -&gt; multi-user.target|多用户模式（没有NFS），没有网络Runlevel 3 |runlevel3.target -&gt; multi-user.target|完全的多用户模式(有NFS)，登陆后进入控制台命令行模式Runlevel 4 |runlevel4.target -&gt; multi-user.target|系统未使用，保留Runlevel 5 |runlevel5.target -&gt; graphical.target|X11控制台，登陆后进入图形GUI模式Runlevel 6 |runlevel6.target -&gt; reboot.target|重启模式，默认运行级别不能设为6，否则不能正常启动emergency|emergency.target|急救模式 3 查看/修改默认运行级别 操作/版本 CentOS 6 CentOS 7 查看 runlevel systemctl get-default 修改 /etc/inittab systemctl set-default name.target 4 切换运行级别 CentOS 6 CentOS 7 init 0 systemctl poweroff init 1 systemctl isolate rescue.target init 2/3/4 systemctl isolate multi-user.target init 5 systemctl isolate graphical.target init 6 systemctl reboot * isolate 1. 切换 Target 时，默认不关闭前一个 Target 启动的进程 2. 加上 isolate 会关闭前一个 Target 里面所有不属于后一个 Target 的进程 二 启动流程2.1 CentOS 6 启动流程![](https://gitee.com/3noanswer/npics/raw/master/Linux/CentOS6 启动流程.png) 1 POST（Power-On-Self-Test） 加电自检，是BIOS功能的一个主要部分，负责完成硬件情况的检测 自检后根据设置获取第一个开机引导设备，如：光驱，硬盘，网络，USB BIOS（Basic Input Output System） 它是一组固化到计算机主板一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制 2 MBR（Master Boot Record） 主引导记录，存储于磁盘的 0 柱面 0 磁道 1 扇区，大小为 512 byte 446 byte BootLoader（GRUB） 64 byte 分区表 2 byte 55AA（用于MBR的有效性检查） 3 GRUB（GRand Unified Bootloader） 是一个来自GNU项目的多操作系统启动程序，分为两个阶段 第一阶段，MBR的前446 byte 1.5 阶段 第二阶段 /boot/grub BootLoader 提供菜单，允许用户选择不同的内核版本，然后将内核装载到内存的特定空间中，解压，展开，并把系统控制权移交给内核 4 加载内核（Kernel） Kernel 会开始侦测硬件并加载驱动程序 5 启动系统第一个进程 init init 进程控制后续各种服务的启动，init 是按照配置顺序启动服务（串行） # chkconfig: 2345 10 90 表示此服务可以在 Runlevel 2345 下启动，启动顺序为 10，关闭顺序为 90 6 获取系统运行级别 init 读取/etc/inittab配置文件， 获取系统默认运行级别 7 系统初始化 init 执行 /etc/rc.d/rc.sysinit 脚本来进行系统初始化，准备软件执行的作业环境 (如网络、时区等) 8 启动服务 init 执行系统运行级别对应的脚本，如 /etc/rc.d/rc3.d，及 /etc/rc3.d/* 下所有脚本 9 开机自启动程序 init 执行 /etc/rc.d/rc.local 脚本 10 登录界面 运行 mingetty 进程，进入登录界面 2.2 CentOS 7 启动流程![](https://gitee.com/3noanswer/npics/raw/master/Linux/CentOS7 启动流程.png) 三 进程3.1 概述 进程是已启动的可执行程序的运行实例，有以下组成部分： 已分配内存的地址空间； 安全属性，包括所有权凭据和特权； 程序代码的一个或多个执行线程； 进程状态 3.2 守护进程（Daemon） Linux服务器的主要任务就是为本地或远程用户提供各种服务 Linux系统上提供服务的程序通常是守护进程 守护进程一直在系统后台运行，时刻地监听用户的服务请求，一旦用户发出了服务请求，守护进程便为它们提供服务 3.3 系统初始化进程 系统初始化进程是一个特殊的的守护进程，其PID为1 是其他守护进程的父进程或者祖先进程，系统上所有的守护进程都是由系统初始化进程进行管理的（如启动、停止等） 在Linux的发展历史过程中，使用过3种初始化进程 init upstart systemd 3.4 进程状态 状态 说明 R（运行） 进程正在运行或在运行队列中等待 S（休眠） 可中断睡眠状态，可以被唤醒 D（不可中断） 不可中断睡眠状态，通常用于 I/O 情况 Z（僵死） 子进程退出，父进程还在运行，但是父进程没有读到子进程的退出状态，子进程进入僵死状态 T（暂停） 进程收到停止信号SIGSTOP后停止运行，可以发送SIGCONT信号让进程继续运行 X（死亡） 该状态是返回状态，在任务列表中看不到 t（追踪） 当利用gdb调试某个程序，程序停留在某个断点处时，就处于跟踪状态 状态组合符号 说明 s 表示进程是控制进程 &lt; 表示进程运行在高优先级上 N 表示进程运行在低优先级上 L 表示进程有页面锁定在内存中 l 表示进程是多线程的 + 表示进程运行在前台 3.5 查看进程1 ps1 ps -aux 属性 说明 user 启动进程的用户 PID 进程ID %CPU 进程占用cpu百分比 %MEM 进程占用内存百分比 VSZ 进程占用虚拟内存大小（KB） RSS 进程占用物理内存大小（KB） TTY 进程启动终端 STAT 进程状态 START 进程启动时间 TIME 进程执行起到现在总的CPU占用时间 COMMAND 启动进程的命令 2 ps -ef 属性 说明 UID 启动进程的用户 PID 进程 ID PPID 父进程 ID C 进程生命周期中的CPU利用率 STIME 进程启动时间 TTY 进程启动终端 TIME 进程执行起到现在总的CPU占用时间 CMD 启动进程的命令 * TTY 1. ? * 表示与终端无关，这种进程一般是内核态进程 2. tty1~7 * 本地终端 3. pts/0+ * 远程终端 3 ps -le 信息更详细 2 pstree pstree [OPTION] [PID | USER] 以树形结构显示程序和进程之间的关系 OPTION -a 显示启动每个进程对应的完整指令，包括启动进程的路径、参数等 -c 不使用精简法显示进程信息，即显示的进程中包含子进程和父进程 -n 根据进程 PID 号来排序输出，默认是以程序名排序输出的 -p 显示进程的 PID -u 显示进程对应的用户名称 3 lsof（list opened files） lsof [OPTION] 列出进程调用或打开的文件的信息 OPTION -u 用户名 列出某个用户的进程打开的文件 -p pid 列出指定进程号所打开的文件 -c 字符串 列出以字符串开头的进程打开的文件 -i 条件 列出符合条件的进程 3.6 监听进程1 top top [OPTION] OPTION -d 秒数 指定每隔几秒刷新，默认3秒 -n 次数 指定 top 抿了执行次数 -b 使用批处理模式输出。 一般和 -n 选项合用，用于把 top 命令重定向到文件中 -p PID 仅查看的进程 -u USER 只监听某个用户的进程 2 top 输出窗口交互命令 命令 说明 ?, h 显示交互模式的帮助 空格 默认 3s 刷新一次，按空格立即刷新 P 按照 CPU 的使用率排序（默认） M 按照内存的使用率排序 N 按照 PID 排序 T 按照 CPU 的累积运算时间排序，即按照 TIME+ 项排序 q 退出 top 命令 3 top 输出信息第一行（任务队列信息） 系统当前时间，系统运行时间，登录用户数，CPU负载 第二行（进程信息） 系统进程总数，运行进程数，睡眠进程数，停止进程数，僵尸进程数 第三行（CPU 信息） 内容 说明 us 用户模式占用的 CPU 百分比 sy 系统模式占用的 CPU 百分比 ni 改变过优先级的用户进程占用的 CPU 百分比 id 空闲 CPU 占用的 CPU 百分比 wa 等待输入/输出的进程占用的 CPU 百分比 hi 硬中断请求服务占用的 CPU 百分比 si 软中断请求服务占用的 CPU 百分比 st 虚拟时间百分比，就是当有虚拟机时，虚拟 CPU 等待实际 CPU 的时间百分比 第四行（物理内存信息 Mem） 内容 说明 total 物理内存的总量 free 空闲的物理内存数量 used 己经使用的物理内存数量 buff/cache 作为缓冲/缓存的内存数量 第五行（交互分区信息 Swap） 内容 说明 total 交换分区（虚拟内存）的总大小 free 空闲交换分区的大小 used 已经使用的交换分区的大小 avail Mem 总的可利用内存是多少 剩余部分（进程信息） 内容 说明 PID 进程的 ID USER 进程所属的用户 PR 优先级，数值越小优先级越高（由内核动态调整，用户不能修改） NI 优先级，数值越小优先级越高（用户可以自己调整） VIRT 进程使用的虚拟内存的大小，单位为 KB RES 进程使用的物理内存的大小，单位为 KB SHR 共享内存大小，单位为 KB S 进程状态 %CPU 进程占用 CPU 的百分比 %MEM 进程占用内存的百分比 TIME+ 进程执行起到现在总的CPU占用时间 COMMAND 启动进程的命令 3.6 结束进程1 kill1 原理 kill 命令会向操作系统内核发送一个信号和目标进程的 PID，然后系统内核根据收到的信号类型，对指定进程进行相应的操作 2 语法 kill -l 查看所有信号信息 kill [信号编号] PID 信号编号 信号名 说明 1 SIGHUP 重启进程 2 SIGINT 非强制性结束进程，ctrl + c 发出的是 kill -2 的信号 9 SIGKILL 强制结束进程 15 SIGTERM 正常结束进程，默认信号 19 SIGSTOP 挂起一个进程，ctrl + z 发出的是 kill -19 信号 2 killall killall [OPTION] [信号编号] 进程名 kill 命令使用 PID 结束进程，而 killall 使用进程名称来结束进程 OPTION -i 交互式，询问是否要杀死某个进程 -I 忽略进程名的大小写 4 pkill pkill [OPTION] [信号编号] 进程名 用来结束进程时，用法与 killall 一致 pkill [信号编号] -t 终端号 按照终端号踢出登陆用户 四 硬件信息4.1 CPU1 CPU 信息 cpu 路数 cpu 的物理个数 cpu 核数 cpu 的逻辑个数 core 一个物理 cpu 的核心数 核数 = 路数 * core 2 查看 CPU 信息 /proc/cpuinfo12345# 每一核cpu信息以空行分隔model name: # cpu型号physical id: # cpu路数，从0开始编号cpu cores: # 一路cpu的核数processor: # cpu核数，从0开始编号 lscpu1234model name: # cpu型号Socket(s): # cpu路数，从0开始编号Core(s) per socket: # 一路cpu的核数CPU(s): # cpu核数，从0开始编号 3 CPU 负载 负载简单说就是 cpu 的任务量，任务队列的平均长度 负载值 与 cpu 核数有关，负载不应该超过核的数量 负载信息 1分钟平均负载 5分钟平均负载 15分钟平均负载 4 查看 CPU 负载 /proc/loadavg10.00 0.01 0.05 1/104 1445 uptime 显示 cpu 负载信息 当前时间 系统运行时间 登录用户数 系统负载 w 显示 cpu 负载 及 登录用户信息 4.2 内存1 说明 通常 空闲内存 &gt; 可用内存，因为有时缓冲或缓存会空出一些内存，但是无法使用，这部分内存算在空闲内存上而不算在可用内存上 空闲内存：没有使用的内存 可用内存：没有使用的内存中可以使用的内存 2 查看内存信息 /proc/meminfo123456MemTotal: # 总内存MemFree: # 空闲内存MemAvailable: # 可用内存Buffers: # 缓冲Cached: # 缓存SwapCached: # 交换分区使用情况 free [OPTION] 显示内存信息 OPTION -h, --human 以人类可读的方式显示信息 -b, --bytes 以 byte 为单位显示 -k, --kilo 以 kb 为单位显示，默认 -m, --mega 以 mb 为单位显示 -g, --giga 以 gb 为单位显示 4.3 磁盘1 /proc/mounts 磁盘挂载信息 2 df df [OPTION] [file] 查看磁盘信息及挂载信息 option -h, --human 以人类可读的方式显示信息 -a, --all 显示所有文件系统信息 五 系统信息 /etc/reedat-release 系统版本信息（简略） /etc/os-release 系统版本信息（详细） uname -a 查看系统与内核相关信息","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 目录结构","slug":"Linux-目录结构","date":"2020-03-29T03:03:07.000Z","updated":"2020-03-29T03:05:30.242Z","comments":true,"path":"2020/03/29/Linux-目录结构/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","excerpt":"","text":"一 FHS1.1 概述 FHS FileSystem Hierarchy Standard 文件系统层次化标准，即目录结构规范 1.2 两层规范 / 目录下的各个目录应该放什么文件数据 针对 /usr 及 /var 这两个目录的子目录来定义 二 Linux目录结构2.1 / 目录 说明 / 根目录 /root Home directory for the root user (optional) /home User home directories (optional) /bin → /usr/bin Essential command binaries /sbin → /usr/sbin Essential system binaries /boot Static files of the boot loader 是boot分区的挂载点 /dev Device files /etc Host-specific system configuration /media Mount point for removeable media /mnt Mount point for mounting a filesystem temporarily /tmp Temporary files /var Variable data /usr Secondary hierarchy 系统软件和用户程序所在目录 /srv Data for services provided by this system /lib → /usr/lib Essential shared libraries and kernel modules /opt Add-on application software packages /proc Kernel and process information virtual filesystem 目录中数据存在内存 重启丢失 /sys 虚拟文件系统，记录内核相关信息，不占磁盘空间 /run 正在运行的进程相关信息的文件 lost + found 磁盘、文件系统损坏 断电 临时存放文件 2.2 /usr 最初linux只有一个盘，此盘挂载在 / 目录 后来一个盘不够用，又加了一个盘，第二个盘挂载在/usr目录，并且规定： 第一块盘用来存放系统程序相关 第二块盘用来存放用户自己程序相关。 / 和 /usr 目录结构完全相同 目录 说明 /usr/locl 源码编译安装软件的默认路径 /usr/src 存放源码的目录 /usr/share 帮助与说明文件，也可放置共享文件 2.3 /var/log 文件 说明 /var/log/messages 记录系统或服务运行的状态信息 和 错误信息 /var/log/secure 记录用户登录信息 /var/log/dmesg 记录了系统在开机时内核自检的信息（硬件加载） /var/log/cron 记录了系统定时任务信息 2.4 /etc 目录 说明 /etc/sysconfig/network-scripts/ifcfg-ens33 网卡配置文件 /etc/resolv.conf DNS客户端配置文件 /etc/hosts 系统本地的DNS解析文件 /etc/hostname 主机名配置文件 /etc/fstab 开机设备自动挂载配置文件 /etc/rc.local -&gt; /etc/rc.d/rc.local 开启自启动程序配置文件 /etc/bashrc /etc/profile 系统环境变量、别名等配置文件 /etc/init.d 软件启动程序所在目录（CentOS 6） /etc/ininttab 系统运行级别配置文件（CentOS 6） /etc/profile.d 用户登录后执行的脚本所在目录 /etc/issue 本地终端登录前欢迎信息 /etc/issue.net 远程终端登录前欢迎信息 /etc/motd 本地及远程登陆后欢迎信息 /etc/sysctl.conf Linux系统内核的配置和优化 /etc/os-release 系统版本信息 /etc/redhat-release 系统版本信息 /etc/passwd 账号信息 /etc/shadow 密码信息 /etc/group 组信息 /etc/gshadow 组密码信息 /etc/sudoers sudo 命令配置文件（权限提升） /etc/login.defs 所有用户登录时的默认配置 /etc/selinux selinux及其配置文件 /etc/locale.conf 系统语言及字符编码，环境变量LANG /etc/logrotate.conf 日志分割配置文件 * /etc/rc.local -&gt; /etc/rc.d/rc.local 1. 开启自启动程序命令的配置文件，开机自动加载此文件 2. CentOS 7 需要先为此文件添加执行权限 2.5 /proc 文件 说明 /proc/meminfo 内存信息 /proc/cpuinfo cpu信息，每一核以空行隔开 /proc/loadavg 负载信息 /proc/mounts -&gt; /proc/self/mounts 挂载信息","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Shell","slug":"Shell","date":"2020-03-29T03:02:17.000Z","updated":"2020-03-29T03:02:39.752Z","comments":true,"path":"2020/03/29/Shell/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Shell/","excerpt":"","text":"一 Shell 概述 硬件 → 内核 → shell → 外层应用程序 shell 是命令解析器，将命令解析成二进制，是人和计算机交互的桥梁，linux 命令，windows 图形操作都需要shell来解析 shell 还是编程语言，解释型的脚本语言，在shell中可以直接调用 linux系统命令 二 Shell 分类2.1 Bourne Shell 1979年 unix 就开始使用，主文件名为sh Bourne Shell 家族 sh Bash 与sh兼容，现在为linux的默认 shell ksh psh zsh 2.2 C Shell 主要用在BSD版的unix中，与Bourne Shell不兼容 C shell家族 csh tcsh 三 Shell 相关配置文件 /etc/shells 所有shell类型 输入shell名即可切换shell /etc/password 用户具体使用哪一个shell，取决于此文件每一行的最后一个字段 四 快捷键 快捷键 说明 tab 补全 ctrl + c 终止正在执行的任务或者结束当前行的输入，发送 SIGINT 信号，终止一个进程 ctrl + d 退出当前shell，同 exit ctrl + z 暂停执行命令并放入后台，发送 SIGSTOP信号，挂起一个进程 ctrl + a 光标回到命令行首 ctrl + e 光标回到命令行尾 ctrl + ← → 在单词间左右移动光标 ctrl + u 剪切（删除）光标到行首的字符 ctrl + k 剪切（删除）光标到行尾的字符 ctrl + w 剪切（删除）一个空格分隔的字符串 ctrl + y 粘贴剪切的内容 ctrl + insert 复制命令行内容 shift + insert 粘贴命令行内容 ctrl + r 搜索命令行使用过的历史命令 ctrl + g 退出ctrl + r 搜索历史命令模式 Esc + . 获取上一条命令的最后部分（空格分隔） ctrl + l 清屏 同clear ctrl + s 锁定终端，使之无法输入内容 ctrl + q 结束 ctrl + s 的锁定 !! 执行上一条命令 !xx 执行最近以xx开头的命令 !xx:p 仅打印最近以xx开头的命令，但不执行 !num 执行历史命令列表的第num条命令 !$ 获取上一条命令的最后部分，同 Esc + . 五 命令5.1 内置命令 &amp; 外部命令1 内置命令 内置命令和shell是一体的，它们作为shell工具的组成部分存在。 内置命令在系统启动时就调入内存，是常驻内存的 内置命令一般在系统中不存在文件，而存在于bash解释器里 执行内置命令时不需要通过衍生出子进程来执行，也不需要打开程序文件。所以内置命令的执行速度要更快，效率也更高 2 外部命令 外部命令也称为文件系统命令，是bash shell之外的程序，它并不是shell 的一部分。 外部命令是系统软件的功能，用户需要时才从硬盘中读入内存 外部命令在系统路径下有相应的可执行文件，一般位于/bin、/usr/bin、/sbin 或 /usr/sbin。 执行外部命令时，Linux系统会创建出一个子进程（这种操作被称为衍生），Linux系统需要消耗资源来设置新子进程的环境，所以执行外部命令有额外的代价。 3 type type [-a] 命令 查看命令类型 pwd is a shell builtin 内置命令 pwd is /usr/bin/pwd 显示命令路径则为外部命令 -a 查看所有信息，有的命令如 pwd，即是内置命令又是外部命令 5.2 别名（alias） alias 查看别名列表 alias 别名 = 命令 为指定命令创建别名（临时） unalias 别名 删除别名 屏蔽别名 \\命令 命令绝对路径 删除别名 5.3 命令执行流程 判断输入的命令是否是绝对路径命令，是则直接执行，否 →2 判断输入的命令是否是别名命令，是则操作别名代表的真实命令，否操作输入的命令，无论是否，操作的命令 → 3 判断命令是否是内置命令，是则直接执行，否 → 4 判断外部命令是否有缓存，是则直接执行，否 → 5 根据系统环境变量 PATH 定义的路径依次查找命令的可执行文件，找到则执行，没找到则报错 执行过的外部命令会保存在内部缓存中，当再次执行相同的命令，会通过缓存调取执行 六 配置文件6.1 login shell &amp; non-login shell1 login shell 取得 shell 时需要完整的登陆流程的，就称为 login shell。 2 non-login shell 取得 shell 没有通过登录流程，就称为 non-loagin shee 比如在原本的 bash 环境下再次使用 bash 这个命令，建立了一个bash子进程，没有输入账号密码， 那第二个 bash 就是 non-login shell 。 3 一个判断的方式 echo $0 -bash：login shell bash：non-login shell 6.2 Interactive shell &amp; non-interactive shell1 Interactive shell（交互式shell） shell中的命令时由用户从键盘交互式地输入的，运行的结果也能够输出到终端显示给用户看。 2 non-interactive shell（非交互式shell） shell可能由某些自动化过程启动，不能直接接收用户的输入，也不能直接输出结果给终端用户看。 6.3 配置文件加载过程 1 login shell /etc/profile 加载系统配置文件1231 配置了一些环境变量 `USER LOGNAME MAIL PATH HOSTNAME HISTSIZE`2 配置了默认 umask3 调用 /etc/profile.d 下的脚本文件 ~/.bash_profile | ~/.bash_login | ~/.profile 加载用户配置文件，三者按照顺序只会读取其中的一个123456# 1 加载 ~/.bashrcif [ -f ~/.bashrc ]; then . ~/.bashrc fi# 2 由于脚本是顺序执行，所以首先加载 ~.bashrc，之后执行下边内容PATH=$PATH:$HOME/bin ~/.bashrc 用户配置12345678# 1 定义了一些别名alias rm=&apos;rm -i&apos;alias cp=&apos;cp -i&apos;alias mv=&apos;mv -i&apos;# 2 加载 /etc/bashrcif [ -f /etc/bashrc ]; then . /etc/bashrcfi /etc/bashrc 系统配置，配置了环境变量 PS1 2 non-login shell ~/.bashrc 只会读取 ~/.bashrc 这一个文件 /etc/bashrc 配置了环境变量 PS1 PATH 配置了 umask 调用 /etc/profile.d 下的脚本文件 .sh 6.4 重载配置文件 source 配置文件 . 配置文件 七 Shell 中的符号7.1 基本符号 符号 说明 \\ 转义符 $ 用于调用变量的值 &#39;&#39; 单引号，所见即所得。 &quot;&quot; 双引号，在双引号中$ &#96; &lt;/code> 有特殊含义 &#96;&#96; 反引号，解析命令 $() 同反引号，解析命令 &#124; 管道符，将前一个命令的正确输出输入到后一个命令 ; 前后命令没有逻辑关系，顺序执行 &amp;&amp; 逻辑与，前命令成功，后命令才执行 &#124;&#124; 逻辑或，前命令成功，后命令不执行；前命令不成功，后命令执行 7.2 集合 &amp; 序列1 集合 {ele1, ele2, ele3, ...} 2 序列 {first .. last .. increment} 从 first 开始，每次增长 increment ，不超过 last 3 集合或序列可与外部字符、集合或序列相结合1234echo a&#123;,2&#125; # a a2echo a&#123;1,2&#125; # a1 a2echo a&#123;1..3&#125; # a1 a2 a3echo &#123;1,2&#125;&#123;1..3&#125; # 11 12 13 21 22 23 7.3 通配符 符号 说明 ? 1个 任意字符 * 0 或多个 任意字符 ### 通配符 &amp; 正则 #### 1 通配符 1. 通配符根据文件名称进行筛选，是完全匹配 2. ls、find、cp... 这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配 2 正则 正则根据文件内容进行筛选，是包含匹配 grep、awk、se... 等命令可以支持正则表达式 3 Shell的 * 和正则的 * Shell 中的 * 表示匹配任意数量的任意字符，是文本，能单独出现 正则中的 * 代表数量，表示前一个字符或组连续出现 0 次或多次，不能单独出现 7.4 重定向1 标准输入/输出 类型 设备 设备文件名 文件描述符 标准输入 键盘 /dev/stdin 0 标准输出 显示器 /dev/stdout 1 标准错误输出 显示器 /dev/stderr 2 * 文件描述符 1. 是内核为了高效管理已被打开的文件所创建的索引，用于指向被打开的文件 2. 对文件描述符的操作就是对文件本身的操作。 可以直接通过操作文件描述来修改文件 2 标准输入重定向 语法 说明 命令 [0]&lt; 文件 将文件作为命令的输入 命令 [0]&lt;&lt; EOF ... EOF 把标识符之间内容作为命令的输入 * EOF * end of file * 可自定义，必须成对，后一个必须顶格（行首部） 3 标准输出重定向 语法 说明 命令 [1]&gt; 文件 将命令的正确输出添加到文件（覆盖） 命令 [1]&gt;&gt; 文件 将命令的正确输出追加到文件 4 标准错误输出重定向 语法 说明 命令 2&gt; 文件 将命令的错误输出添加到文件（覆盖） 命令 2&gt;&gt; 文件 将命令的错误输出追加到文件 5 标准输出重定向（正确输出+错误输出） 语法 说明 命令 &amp;&gt; 文件 将命令的输出（正确和错误）添加到文件（覆盖） 命令 &amp;&gt;&gt; 文件 将命令的输出（正确和错误）追加到文件 命令 &gt; 文件 2&gt;&amp;1 将命令的输出（正确和错误）添加到文件（覆盖） 命令 &gt;&gt; 文件 2&gt;&amp;1 将命令的输出（正确和错误）追加到文件 命令&gt;文件1 2&gt;文件2 把命令正确的输出添加到文件1中，错误的输出添加到文件2中（覆盖） 命令&gt;&gt;文件1 2&gt;&gt;文件2 把命令正确的输出追加到文件1中，错误的输出追加到文件2中 1. 1&gt;&amp;2 * 把正确输出输出到错误输出中 2. 2&gt;&amp;1 * 把错误输出输出到正确输出中 3. 命令 &gt;&gt; 文件 2&gt;&amp;1 * 没错误就把正确输出追加到文件 * 有错误就先把错误输出到正确输出中，然后一起追加到文件 八 变量8.1 规则 变量名不能以数字开头，由数字，字母，下划线组成 变量默认类型都是字符串，如果要进行数值运算，必须指定变量为数值型 变量赋值时等号两边不能有空格 变量的值有空格，需要单引号或者双引号 8.2 普通变量（局部变量） 只对当前shell有效，临时变量，重启失效 set 查看变量 变量名=值 定义变量 unset 变量名 删除变量 $变量名 取值 8.3 环境变量（全局变量）1 概述 命令行定义时，对当前shell及其子shell有效，临时变量，重启失效 写入配置文件中，根据配置文件决定对哪个shell有效，永久变量 2 命令 env 查询环境变量 export 变量名=值 定义环境变量 unset 变量名 删除变量 $变量名 获取值 3 常见环境变量 环境变量 说明 PATH 定义命令行解释器搜索执行命令的路径 HOME 用户家目录 SHELL 用户使用的 Shell 解释器名称 LANG 系统语言及字符编码 EDITOR 用户默认的文本编辑器 PS1 Shell 的命令提示符 RANDOM 生成一个随机数字 HISTSIZE 输出的历史命令记录条数 HISTFILESIZE 保存的历史命令记录条数 MAIL 邮件保存路径 4 位置参数变量 位置参数变量 说明 $0 代表命令本身 $n 代表第 n 个参数，如果 n&gt;=10，用大括号包含，如 ${10} $# 参数总个数 $@ 获取所有参数，每个参数独立，默认用空格分隔 $* 不加双引号同 $@，加上双引号，把所有参数视为一个整体 $? 获取上一个命令的执行返回值，0 成功，非 0 失败。 $$ 当前脚本的进程号（PID） $! 后台运行的最后一个脚本的进程号（PID） $_ 获取命令行最后一个参数，相当于 ESC . 5 变量值操作 ${} ${变量#pattern} # 从前往后匹配并删除 ## 贪婪匹配 ${变量%pattern} % 从后往前匹配并删除 %% 贪婪匹配 ${变量/oldStr/newStr} 替换一个匹配 ${变量//oldStr/newStr} 替换所有匹配 6 数值运算 $(()) 整数运算 可以用在引号中，不会直接输出 $[] 整数运算 可以用在引号中，不会直接输出 expr 1 + 1 整数运算，需要数字与运算符间要加空格 不能用在引号中，会直接输出 echo 1+1|bc 整数/小数运算 九 Shell 编程9.1 执行脚本方式 sh/bash 脚本 借助解释器执行，脚本可以不用是绝对路径 脚本绝对路径 把脚本当成命令执行（必须赋予执行权限） 9.2 windows 脚本在linux执行 问题 linux 换行符识别为$，而windows 换行符识别为^M$ :set list 在文件中查看 cat -A FIle 在外部查看 解决 安装 dos2unix dos2unix FILE 把文件从 dos 转为 unix，也就修改了换行符 9.3 脚本语法12#!/bin/bash# 注释 9.4 条件表达式1 语法 [ 条件表达式 ] 两侧各有一个空格 条件成立返回 0，反之 1 test 条件表达式 2 文件 表达式 单词 说明 -e FILE exit 判断该文件是否存在 -f FILE file 判断该文件是否存在，且是否是文件 -d FILE directory 判断该文件是否存在，且是否是目录 -l FILE link 判断该文件是否存在，且是否是链接文件 -r FILE read 判断该文件是否存在，且是否有读权限 -w FILE write 判断该文件是否存在，且是否有写权限 -x FILE execute 判断该文件是否存在，且是否有执行权限 FILE1 -ef FILE2 equals file 判断两个文件是否一样（硬链接） FILE1 -nt FILE2 new than 判断文件1是否比文件2新（最后修改时间） FILE1 -ot FILE2 old than 判断文件1是否比文件2旧（最后修改时间） 3 数值 [[表达式]] [表达式] 单词 说明 == -eq equal 等于 != -ne not equal 不等于 &gt; -gt greater than 大于 &gt;= -ge greater equal 大于等于 &lt; -lt less than 小于 &lt;= -le less equal 小于等于 4 字符串 表达式 单词 说明 -z STRING zero 判断字符串长度是否为 0 -n STRING not zero 判断字符串长度是否不为 0 STR1 = STR2 equal 判断字符串是否相等 STR1 != STR2 not equal 判断字符串是否不相等 5 逻辑表达式 表达式 单词 说明 EXPR1 -a EXPR2 and 逻辑与 EXPR1 -o EXPR2 or 逻辑或 ! EXPR not 逻辑非 6 正则表达式（使用 [[]]） 表达式 说明 =~ PATTERN 判断是否匹配 9.5 语句1 if12345678if [条件] then codeelif [条件] then code......else codefi 12345678if [条件]; then codeelif [条件]; then code......else codefi 2 for1234for 变量名 in 取值列表 # 值用空格或换行隔开 do code... done 1234for((初始值;循环条件;变量变换)) do code done 3 while1234while [条件] do code done 4 until1234until [条件] do code done 一直执行直到条件成立，即条件不成立就无限循环，与while相反 5 case12345678910case $变量 in 模式1) code ;; 模式2) code ;; *) code（皆不符合时执行）esac 6 shell 内置语句 continue 跳出本次循环，继续下一次 break 跳出循环 exit 结束，类似 return 9.6 函数1 定义方式1234561function test() &#123; return 返回值&#125;2test() &#123;return 返回值&#125;3function test &#123;return 返回值&#125; 2 变量定义 shell脚本定义的变量默认都是全局的（包括在函数中定义） local 变量=值 使用local表示只在当前作用域有效 let 用来执行算术运算，等价于 ((运算式)) 3 传参12test $1 $2 ...# 注意 $1 指的是脚本传参的顺序 4 外部调用1test.sh test $1 $2 ... 9.7 数组1 定义1arrName=(val1 val2 ... valN) 2 获取属组长度1$&#123;#arrName[*|@]&#125; 3 获取值121 $&#123;arrName[index]&#125; # 获取指定值2 $&#123;arrName[*|@]:startIndex:length&#125; # 获取从startIndex开始的length个值 4 设置值1arrName[index]=value 5 删除121 unset arrName[index] # 删除指定值2 unset arrName # 清空数组 6 替换1$&#123;arrName[@|*]/pattern/new&#125;","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 安装和配置","slug":"Linux-安装和配置","date":"2020-03-29T02:09:49.000Z","updated":"2020-03-29T02:10:51.754Z","comments":true,"path":"2020/03/29/Linux-安装和配置/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"一 概述1.1 硬件 电源 CPU 路数：即CPU的个数，1 路 = 1 CPU 核数 内存 缓冲（buffer） 写：数据 → 内存 → 磁盘 缓存（cache） 读：磁盘 → 内存 → 数据 磁盘 主板 显卡 声卡 键鼠 1.2 服务器 硬件服务器 机架服务器 刀片服务器 塔式服务器 虚拟服务器 阿里云 亚马逊（AWS） 腾讯云 1.3 操作系统 硬件 + 内核 + shell + 软件 1.4 Linux发展历史 FSF free software foundation 自由软件基金会，主要项目是GNU GNU GNU是“GNU is Not Unix”的递归缩写，目标是建立可自由发布和移值的类unix操作系统 GNU类UNIX操作系统是由一系列应用程序，系统库和开发工具构成的软件集合（如Emacs，gcc，bash，gawk），并加上了用于资源分配和硬件管理的内核。 GPL general public license：通用公共许可，是一个开源许可协议 linux 操作系统 = linux内核 + GNU软件和系统软件 + 必要的应用程序 1.5 Linux 发行版 Fedora 免费，新功能，小白鼠 Red Hat 收费 CentOS 去掉Red Hat的logo，收费软件被重新打包编译 后被Red Hat 收购 Ubuntu 桌面 Debian FreeBSD 安全 稳定 1.6 语录 Linux 一切从根开始 Linux 一切皆文件 Linux 系统中命令行的修改大部分都是临时修改，配置文件是永久修改。 Linux 系统服务配置文件修改后，需要重启服务（重新加载配置文件） 二 CentOS 7 安装2.1 下载镜像 CentoOS project Aliyun mirror 2.2 准备虚拟环境 虚拟软件 VMware Workstation 2.3 安装配置1 软件安装 Minimal Insatll Debugging Tools Compatibility Libraries Development Tools System Administration Tools 2 网络（NAT） 主机名 config General 勾选自动连接 IPv4 settings Method Manual （手动） ip 子网掩码 网关 根据虚拟机网络编辑器中 VMnet8 网卡设置 dns 如 223.5.5.5，8.8.8.8 3 磁盘分区（standard partition） /boot 引导分区，256Mb swap 交换分区， 内存 &gt; 8G，swap = 8G，内存 &lt; 8G，swap = 内存 * 1.5 / 根分区，剩余大小 4 关闭安全策略 KDUMP SECURITY POLICY 三 初始化配置3.1 配置 yum 源1 安装 wget yum install wget -y 2 备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 3 下载基本 yum 源 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 4 下载扩展 yum 源 EPEL wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 3.2 更新系统和软件 yum update -y 3.3 安装企业运维常用基础工具包1 CentOS 6 &amp; 7 都要安装的 yum install tree nmap dos2unix lrzsz nc lsof tcpdump htop iftop iotop sysstat nethogs -y 软件包名 说明 tree 树形结构显示文件和目录 nmap 扫描端口的工具 dos2unix 转换脚本格式的工具 lrzsz 包含上传（rz）和下载（sz）文件工具 nc 文件传输、端口检查工具 lsof 反查端口进程，以及服务开发文件工具 wget 网络下载工具 tcpdump 抓包、监听等重要排错工具 htop 系统进程相关信息查看工具 iftop 主机网卡宽带查看工具 sysstat 含有sar iostat 等重要系统性能查看工具 nethogs 显示进程的网络流量 2 CentOS 7 安装的 yum install psmisc net-tools bash-completion bash-completion-extras vim-enhanced -y 软件包名 说明 psmisc 含有 killalll pstree 等命令 net-tools 含有 netstat ifconfig route arp 等命令 bash-completion tab补全功能工具包 bash-completion-extras tab补全功能扩展工具包 vim-enhanced vim 3.4 修改网卡名称1 安装系统时 菜单界面 按 tab 输入 net.ifnames=0 biosdevname=0 2 安装系统后 修改网卡配置文件内容及文件名 /etc/sysconfig/netword-scripts/ens331234561 修改内容 vim /etc/sysconfig/netword-scripts/ens33 name=eth0 device=eth02 修改文件名 mv /etc/sysconfig/netword-scripts/ens33 /etc/sysconfig/netword-scripts/eth0 修改网卡名称规则内核文件 /etc/default/grub1234567891011121314151617181920vim /etc/default/grubGRUB_CMDLINE_LINUX=&quot;rhgb quiet&quot; 改为GRUB_CMDLINE_LINUX=&quot;net.ifnames=0 biosdevname=0 rhgb quiet&quot;``` 3. 系统重新加载 grup 配置文件 * `grub2-mkconfig -o /boot/grub2/grub.cfg`## 3.5 系统优化### 1 selinux#### 1 概述* `Security-Enhanced Linux` * 它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。 * Selinux 用于对 root 用户的权限进行控制#### 2 操作1. `getenforce` * 查看状态2. `setenforce 0` * 临时关闭3. `/etc/selinux/config` SELINUX=enforcingSELINUX=disabled # 永久关闭123456789101112### 2 关闭防火墙1. `systemctl stop firewalld`2. `systemctl disable firewalld`### 3 字符编码1. 修改环境变量 `LANG`（优先级高）2. 修改 `/etc/locale.conf`3. `localectl set-locale en_US.UTF-8`### 4 优化远程连接速度1. 修改ssh服务配置文件 `/etc/ssh/sshd_config` 79 GSSAPIAuthentication no116 UseDNS no12. 配置本地 hosts 文件 `/etc/hosts` 服务器ip 服务器主机名hostname 168.13.24 anyeansan``` 重启 ssh 服务 systemctl restart sshd 4 配置Shell命令提示符样式 PS11 设置格式 参数 说明 \\h hostname（short） \\H hostname（full） \\w current working directory \\W current working directory（basename） \\t 24小时格式显示时间 HH:MM:SS \\d 日期 weekday month date \\u 当前用户名 \\$ root 显示 # 普通用户显示 $ 2 颜色 \\[\\e[F;Bm\\]内容\\[\\e[0m\\] \\[\\e[F;Bm\\] 颜色开始 F 表示字体颜色，30~37 B 表示背景颜色，40~47 特殊显示 0 关闭颜色 1 高亮 4 下划线 5 闪烁 7 反白 8 颜色不可见 \\[\\e[0m\\] 颜色结束 3 式样 export PS1=&#39;\\[\\e[32;1m\\][\\u@\\h \\W]\\$ \\[\\e[0m\\]&#39; export PS1=&#39;\\[\\e[32;1m\\][\\u@\\h \\[\\e[34;1m\\]\\W\\[\\e[32;1m\\]]\\$ \\[\\e[0m\\]&#39; 四 远程连接4.1 远程连接软件 软件 说明 xShell 免费（实用） ScureCRT 收费 Putty 免费 功能简单 4.2 xShell 相关配置1 窗口外观 2 默认会话属性 3 使用密钥连接 将公钥上传至服务端 ~/.ssh/authorized_keys，权限 600 配置 xShell","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Linux 命令","slug":"Linux-命令","date":"2020-03-29T02:04:35.000Z","updated":"2020-03-29T02:08:53.350Z","comments":true,"path":"2020/03/29/Linux-命令/","link":"","permalink":"https://anyeansan.github.io/2020/03/29/Linux-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"一 帮助命令1.1 man（manual） man [OPTION] 命令 查看外部命令的功能 参数 帮助信息等等 OPTION 1 查看命令帮助文档 5 查看配置帮助文档，当命令和配置同名时，使用15来区分，如passwd 文档操作 说明 空格, f 向下翻页 b 向上翻页 回车 向下一行 k 向上一行 /key 向下查找key，n 下一个匹配，N 上一个匹配 ?key 向上查找key 1.2 –help 命令 --help 查看外部命令帮助 1.3 help help 命令 查看shell内置命令的帮助信息，如cd, pwd, history.. 二 开关机命令 命令 说明 shutdown 开启一个一分钟后关机的计划 shutdown -c 取消关机计划 shutdown -h Time 指定时间关机，Time 可以是 now 或具体时间 shutdown -r Time 指定时间重启 systemctl poweroff 关机 systemctl reboot 重启 三 其它命令3.1 echo（display a line of text） echo [OPTION] String 显示文本 OPTION -n 不换行输出 -e 支持转义字符\\b \\t \\r \\n \\e(escape键)... 3.2 xargs xargs [OPTION] &lt; input 将标准输入的所有行一行显示，xargs 会自动忽略别名 OPTION -n num 每一行显示原num行 3.3 column column -t 按表格显示 3.4 tr tr oldStr newStr 从标准输入中替换、缩减或删除字符，并将结果写到标准输出 tr 是一对一的替换 oldStr 字符数 &lt; newStr 字符数，多的新字符忽略，如 echo &quot;abc&quot;|tr &quot;abc&quot; &quot;12345&quot;，结果为 123 oldStr 字符数 &gt; newStr 字符数，多的旧字符都用最后一个新字符替换，如 echo &quot;abcde&quot;|tr &quot;abcde&quot; &quot;123&quot;，结果为 12333 如果 oldStr 中有重复字符则使用最后一个对应的新字符，如echo &quot;abcdba|tr &quot;abcdba&quot; &quot;123456&quot;，结果为 653456 3.5 tee tee [-a] File 读取标准输入的数据，并将其内容输出成文件 -a 追加` 3.6 read read [OPTION] 变量名 接收标准输入并赋值给变量 OPTION -p &quot;提示信息&quot; 在等待read输入时，输出提示信息 -t 秒数 read命令会一直等待用户输入，指定等待时间 -n 字符数 read命令只接受指定的字符数 -s 隐藏输入的数据，适用于机密信息的输入 3.7 cut cut [OPTION] [File] 按“列”提取文本字符 OPTION -f 列号 提取第几列 -d 分隔符 按照指定分隔符分割列 默认为制表符 3.8 sort sort [OPTION] [File] OPTION -f, --ignore-case 忽略大小写 -n, --numeric-sort 依照数值的大小排序 -r, --reverse 反向排序 -t, --field-separator=SEP 指定排序时所用的分隔符 -k n[,m] 按照指定的字段范围排序。从第n字段开始，m字段结束（默认到行尾） 3.9 history history [OPTION] [历史命令保存文件] OPTION -c 清空历史命令 -w 把缓存中的历史命令写入历史命令保存文件 默认用户正常退出后才会保存 默认保存在家目录下~/.bash_history 3.10 dd dd if=输入文件 of=输出文件 bs=块大小 count=块个数 按照指定大小和个数的数据块来复制文件或转换文件 if（input file） 指定输入文件或设备 如果不指定if，默认就会从 stdin 中读取输入 of（output file） 指定输出文件或设备 如果不指定of，默认就会将 stdout 作为默认输出 bs（block size） 数据块 block 大小，默认单位为 byte count 数据块 block 数量 四 文件 &amp; 目录命令4.1 pwd（print working directory） pwd 显示当前工作目录 4.2 cd（change directory） cd dir 切换目录 dir . 当前目录 .. 上级目录 ~ 根目录 - 前一个目录 4.3 mkdir（make directories） mkdir [OPTION] dir 创建一个或多个空目录，linux一切皆文件，目录也是文件，目录与文件不能重名 OPTION -p, --parents 递归创建 目录有多层时，如果父目录不存在，首先创建父目录 4.4 ls（list directory contents） ls [OPTION] [File] 显示文件名或者目录下的内容（默认为当前目录） OPTION -a, --all 显示目录下所有文件，包含隐藏文件（以 . 开头的文件） -A, --almost-all 同 -a 但不包含 . 和 .. -l 显示详细信息 -d, --directory 显示目录本身的信息（而非目录下的内容） -t 根据最后修改时间排序，newest first -r, --reverse 反向排序 -h, --human-readable 以人类可读的信息显示大小 -S 文件从大到小排序 -i, --inode 显示inode number p 区分文件和目录（目录名后添加 /） 4.5 tree（list contents of directories in a tree-like format） tree [OPTION] dir 树形显示目录，需要安装 tree 软件 OPTION -L level 指定显示层级，如-L 1 显示一层 -d 只显示目录 4.6 touch（change file timestamps） touch File 创建一个或多个空文件，如果文件存在则修改文件的最后访问时间和最后修改时间 File 可以使用区间 {begin..end} 如touch {1..10}.txt，即创建1.txt 2.txt ...10.txt10个文件 4.7 cp（copy files and directories） cp [OPTION] Source Destdir 复制一个或多个文件到指定目录 OPTION -r, --recursive 递归复制，用于复制目录 -p 复制时保留文件属性（所有者、权限信息、时间…） -d 复制时保留链接 -a 等同于 -dpr cp test.txt{,.bak} 例用 {} 的结合特性快捷复制，等价于 cp test.txt test.txt.bak 4.8 rm（remove empty directories） rm [OPTION] File 删除一个或多个文件 OPTION -r, --recursive 递归删除，用于删除目录 -f, --force 确认 4.9 mv（move (rename) files） mv Source Dest 如果不在同一个目录则是剪切 如果在同一个目录则是重命名 4.10 cat（concatenate files and print on the standard output） cat [OPTION] File 查看文件内容 OPTION -n, --number 显示行号 tac File 反向查看内容 4.11 more（file perusal filter for crt viewing） more File 分页显示内容，只能向下 4.12 less（opposite of more） less [OPTION] File 分页显示内容，可向上向下 OPTION -N, --LINE-NUMBERS 显示行号 指令 说明 f 下一页 b 上一页 回车 下一行 k 上一行 g 跳到第一行 G 跳到最后一行 p num% 跳到百分之num 4.13 head（output the first part of files） head [OPTION] File 默认显示前10行 OPTION -n 显示前 n 行 4.14 tail（output the last part of files） tail [OPTION] file 默认显示后10行 OPTION -n 显示后n行 -f, --follow 实时监控文件尾部变化，如查看日志 如果文件被删除或移动，没有信息提示，想要监控需要重新追踪 -F 实时监控文件尾部变化 如果文件被删除或移动，有信息提示，如果文件恢复会继续追踪 4.15 file（determine file type） file [OPTION] File 查看文件类型及编码 OPTION -i 查看文件MIME类型及编码 -L 查看软链接文件时，查看的是软链接指向的目标文件的信息 4.16 diff（compare files line by line） diff [OPTION] File 比较文件内容的差异 OPTION -q 仅输出文件是否有差异，不报告详细差异 4.17 stat stat File 查看文件 inode 信息 4.18 wc wc [OPTION] FILE | Input 统计行数、字数、字节数 OPTION -c 统计字节数 -w 统计单词数 -l 统计行数 4.19 rename rename expr replacement File 将替换文件中匹配部分 expr File 中需要重命名的部分 replacement expression 修改成的结果 五 时间命令5.1 date date [OPTION] [Format] 以默认格式查看时间 OPTION -s 修改时间 Format &quot;+%y-%m-%d %H:%M:%S&quot; Y-M-D H:M:S +%F full date 等价于 %Y-%m-%d +%T time 等价于 %H:%M:%S 5.2 ntpdate ntpdate ip 时间同步，需要安装 ntpdate 软件包 ip（ntp 服务器） ntp.aliyun.com cn.pool.ntp.org cn.ntp.org.cn time.asia.apple.com 六 打包压缩解压命令6.1 概述 Linux 中打包文件一般以 .tar 结尾，压缩命令一般以.gz结尾 通常打包和压缩是一起进行的，打包并压缩后的文件后缀一般为 .tar.gz 6.2 打包压缩 tar -zcvf 压缩包 文件 将一个或多个文件打包压缩 -z, --gzip 使用Gzip压缩，后缀名建议.tar.gz -c, --create 创建压缩包文件 -v, --verbose 显示过程 -f, --file= 指定压缩包文件路径 6.3 解压 tar -xvf 压缩包 [-C 解压路径] 默认解压到当前路径 x, --extract, --get 解压 6.4 查看压缩包中的文件 tar -tf 压缩包 -t, --list 七 搜索命令7.1 find（search for files in a directory hierarchy） find [路径] [条件] [操作] 在指定路径根据条件查找文件，并对找到的文件执行指定操作 路径 find 命令查找路径，默认为当前目录 条件 查找的条件，可以有多个 -a 多个条件 逻辑与 关系，默认 -o 逻辑或 -not 逻辑非 操作 -print 打印找到的结果，默认 -exec 命令 {} \\; 对匹配的结果逐个执行命令 {} 代表查到的内容 \\; 匹配的文件可能有多个，即要执行多次命令，用分号隔开 条件 说明 -name Pattern 根据文件名查找（精准匹配，可以用正则） -iname Pattern 根据文件名查找，不区分大小写 -perm Mode 根据文件权限查找 -user User 根据文件属主查找 -group Group 根据文件属组查找 -type Type 根据文件类型查找 -size n/+n/-n 根据文件大小查找 -atime/ctime/mtime n/-n/+n 根据文件时间查找 -inum Num 根据文件 inode 号查找 -maxdepth level 指定目录查找层次深度 7.2 locate（find files by name）1 概述 此命令需要安装 mlocate 软件包 建立文件索引数据库，快速查找文件位置 /var/lib/mlocate/mlocate.db 维护的数据库（文件资料库） /tmp 不在数据库范围 2 使用 updatedb 更新数据库（建立文件和目录结构的对应关系） 如果没有更新过或者是新建立的文件，文件资料库没有，使用locate查找不到 locate File 查找文件绝对路径 7.3 which（shows the full path of (shell) commands） which Command 查看命令文件的绝对路径及别名信息 查找的范围是 PATH 所配置的路径 7.4 whereis（locate the binary, source, and manual page files for a command） whereis Command 查看命令文件的绝对路径及相关帮助文档绝对路径 八 磁盘命令8.1 df（report file system disk space usage） df [OPTION] [File] 查看文件系统的磁盘空间使用信息及挂载信息 OPTION -a, --all 显示所有文件系统信息，包括系统特有的 /proc、/sysfs 等文件系统 -h, --human-readable 使用人们习惯的 KB、MB 或 GB 等单位自行显示容量 -k 以 KB 为单位显示容量（默认） -m 以 MB 为单位显示容量 -T, --print-type 显示文件系统类型 -i, --inodes 不用硬盘容量显示，而是以含有 inode 的数量来显示 8.2 du（disk usage） du [OPTION] [File] 统计目录或文件所占磁盘空间大小 如果是目录，默认显示目录和子目录的磁盘占用量 OPTION -a, --all 显示目录、子目录和子文件的磁盘占用量 -s, --summarize 只统计总磁盘占用量，而不列出子目录和子文件的磁盘占用量 即只显示目录的磁盘占用量 -h, --human-readable 以人类可读的单位显示磁盘占用量 注 ls -l 命令统计的是目录下的子文件名称和子目录名称所占大小 du 命令统计占用磁盘空间 文件大小 文件的实际大小，比如 13KB 文件占用磁盘空间 文件占用磁盘空间取决于文件系统的 block 大小（linux 默认为 4 KB） 1 个block 只能被 1 个文件占用，如果 1 个 block 没有占满，其它空间也不能存储其它文件 1 个文件大小是 13 KB，13 / 4 = 3.25，文件占用磁盘空间就是 4 个block 即 16 KB 九 网络命令9.1 curl 命令 说明 crul url 访问一个网址，获取该网址的文本信息 curl -i url 获取该网址的文本信息以及协议头部信息 curl -I url 只获取请求头 curl -O url 下载指定资源到当前目录，名称默认，--progress 显示进度 curl -o name url 下载指定资源到当前目录，名称name， 9.2 wget 命令 说明 wget url 下载文件 wget -O name url 下载文件并指定名称为name 9.3 net-tools &amp; iproute2 1 netstat 命令 说明 netstat -lntup 查看本机监听的端口 netstat -an 查看本机所有的网络连接 netstat -rn 查看本机路由表 2 route1 查 route [-nee] 查看路由表信息 -n 不使用名字而使用IP和Port -ee 更详细的信息 2 增删默认路由 route add/del default gw 网关 route add/del default dev 接口 3 增删网络路由 route add/del -net 目标网络地址 netmask 子网掩码 gw 网关 route add/del -net 目标网络地址 netmask 子网掩码 dev 接口 4 增删主机路由 route add/del -host 目标主机地址 netmask 子网掩码 gw 网关 route add/del -host 目标主机地址 netmask 子网掩码 dev 接口 3 ip 命令 说明 ip addr show [eth0] 显示网卡及配置的地址信息 ip addr add/del IP/子网掩码 dev 网卡接口 临时添加删除IP ip link set eth0 up/down 启用/禁用网卡 ip route show 查看策略路由，路由表 /etc/iproute2/rt_tables ip route get IP 通过IP地址查询路由包从哪条路由来 ip route add/del default via 网关 增删默认路由 ip route add/del -net 目标网络地址 netmask 子网掩码 via 网关 增删网络路由 ip route add/del -host 目标主机地址 netmask 子网掩码 via 网关 增删主机路由 ip -s link 显示所有网络接口的统计数据 ip -s -s link ls 网卡接口 获取一个特定网络接口的信息 4 ss ss -lntup 查看本机监听的端口 十 三剑客10.1 grep（print lines matching a pattern） grep [OPTION] Pattern [File] 打印匹配行 OPTION 说明 -v, --invert-match 反向选择，即仅列出不匹配的行 -i, --ignore-case 忽略大小写 -n, --line-number 显示在原文件中的行号 -w, --word-regexp 单词必须完全匹配 -c, --count 统计匹配的行数 -o, --only-matching 只输出匹配内容，而非行 -E, --extended-regexp 扩展的grep，等同于 egrep -A num, --after-context=num 显示匹配行及其之后的 num 行 -B num, --before-context=num 显示匹配行及其之前的 num 行 -C num, num, --context=num 显示匹配行及其前后 num 行 10.2 sed（stream editor for filtering and transforming text）1 概述 sed 是一种几乎包括在所有 UNIX 平台的轻量级流编辑器。 sed主要是用来对文本数据增、删、改、查。（以行为单位） 2 原理 Sed默认并不直接修改源文件，而是将一行内容读取到内存中（模式空间 pattern space），然后判断内容是否符合条件，如果不符合则读取下一行，如果符合则执行相应指令。 所有的指令操作执行后，模式空间的内容默认输出至标准输出(即屏幕上) 3 语法 sed [OPTION] [address] command [File] OPTION -n sed 默认会完整输出所有内容 -n 表示只输出经过sed命令处理的行 -e script 允许多个脚本指令被执行 -e script1 -e script2 script1;scrpt2 -f script-file 从文件中读取脚本指令 -r 识别扩展正则表达式 -i[suffix] 慎用，直接修改源文件（将内存中的信息覆盖到磁盘） 注意：i 和 n 一起使用相当于清空，因为 n 不输出内容 suffix 代表为原文件生成一个指定后缀的备份文件 address （默认为全文） -number 指定行号number $ 表示最后一行 -first~step 指定以first开始，步长为step addr1,addr2 匹配从addr1到addr2的所有行 addr1,+N 匹配地址1以及后面的N行 /regexp/ 正则 command p 打印 a 在当前行下一行添加，可以使用 \\n 来添加多行 i 在当前行上一行添加，可以使用 \\n 来添加多行 d 删除指定行 c 替换指定行 s 替换字符串 s/pattern/replacement/flags replacment &amp; 代表正则所匹配的内容 \\num 引用num组 flags g 对一行中所有匹配替换（默认只替换第一个匹配） n 1~512的数字，表示对一行中第n个匹配替换 p 打印模式空间的内容 -w file 将模式空间的内容写到文件file中 10.3 awk（pattern scanning and processing language）1 概述 /usr/bin/awk -&gt; /usr/bin/gawk g 代表GNU组织 awk 不仅仅是强大的文本分析工具，还是一种编程语言 awk 主要用来分析文本（以行为单位） 2 原理 若有 BEGIN 代码块，则执行一次 awk读取一行内容，判断是否符合条件，若符合则使用相应动作进行处理，否则读取下一行。 若有 END 代码块，则执行一次 3 语法 awk [OPTION] BEGIN{} [patten] {action} END{} [file] OPTION -F 指定字段（列）分隔符（默认为空格） 指定分隔符时有加号 + 表示有连续多个分隔符只算一个 -F &quot;[分隔符列表]+&quot; 使用多个分隔符 BEGIN{} 初始化代码块，只在处理数据前执行一次，可以用来修改内置变量等等 END{} 结尾代码块，只在处理数据后执行一次 1 运算符 运算符 说明 ? 条件表达操作符 &#124;&#124; && ! 逻辑或 与 非 ~ 匹配，非精确比较（== 是精确比较） !~ 不匹配，非精确比较 + - * / % ++ -- 算术运算符 = += -= *= /= %= 赋值运算符 &lt; &lt;= &gt; &gt;= == != 比较运算符 2 内置变量 变量 说明 FS 字段分隔符，默认为空格 NF 当前行字段个数，即有多少列，$NF 表示最后一列 NR 已经读取的记录数，即当前行是第几行，从1开始 FNR 记录总数 FILENAME 当前文件名 OFS 输出字段分隔符， 默认是空格 ORS 输出的记录分隔符，默认是换行符 RS 控制记录分隔符，默认为换行符 ARGC 命令行参数个数 ARGV 命令行参数排列 $0 表示整行 $n n&gt;0 代表第n列 * 自定义变量 * awk &#39;name=&quot;zsan&quot;{print name}&#39; file 3 内置函数 函数 说明 gsub(r,s) 在整个$0中用s替代r gsub(r,s,t) 在整个t中用s替代r index(s,t) 返回s中字符串t的第一位置 length(s) 返回s长度 match(s,r) 测试s是否包含匹配r的字符串 split(s,a,fs) 在fs上将s分成序列a sprint(fmt,exp) 返回经fmt格式化后的exp sub(r,s) 用$0中最左边最长的子串代替s substr(s,p) 返回字符串s中从p开始的后缀部分 substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分 4 print &amp; printf printf 是标准格式输出命令，不会自动换行 print 会自动添加换行符（linux 默认没有print） printf printf &#39;输出类型输出格式&#39; 输出内容 输出类型 %ns 输出字符串。n是数字指输出几个字符 %ni 输出整数。n是数字指输出几个数字 %m.nf 输出浮点数。m和n是数字，指输出总位数(m)和小数位数(n) 输出格式 \\r \\n \\t 水平tab \\v 垂直tab \\b 退格Backspaced \\f 清屏 \\a 输出警告声音 输出内容 $() 使用命令获取内容 不能直接用文件，管道符也不行 print print 输出内容 输出内容如果用逗号隔开则代表显示结果使用空格隔开1234print &apos;a b&apos; # abprint &apos;a,b&apos; # a bprint &apos;a&quot;,&quot;b&apos; # a,bprint &apos;a123b&apos; # a123b","categories":[{"name":"Linux","slug":"Linux","permalink":"https://anyeansan.github.io/categories/Linux/"}],"tags":[]},{"title":"Hexo","slug":"Hexo","date":"2019-11-12T06:41:59.000Z","updated":"2020-03-29T02:06:32.575Z","comments":true,"path":"2019/11/12/Hexo/","link":"","permalink":"https://anyeansan.github.io/2019/11/12/Hexo/","excerpt":"","text":"一 搭建1 GitHub 注册账号 创建仓库，名为yourname.github.io 2 Git 安装git及gitbash 配置github账号及ssh key 3 NodeJs4 Hexo4.1 安装 npm install -g hexo 4.2 初始化 hexo init12345678node_modules：依赖包public：存放生成的页面scaffolds：命令生成文章等的模板source：用命令创建的各种文章（post下为原始md文件）themes：主题_config.yml：整个博客的配置db.json：source解析所得到的package.json：项目所需模块项目的配置信息 4.3 root config.yml配置deploy1234deploy: type: git repository: git@github.com:anyeansan/anyeansan.github.io.git branch: master 二 命令1 hexo n hexo n xxx 在source/post目录下根据scaffolds/post.md模板创建xxx.md hexo n page xxx 在source目录下根据scaffolds/page.md模板创建xxx文件夹并生成index.md 2 hexo clean 删除根下public目录 3 hexo g 在根下创建public目录并生成静态文件 source目录下的所有文件都会原样复制（除了md文件会转成html）到public目录 4 hexo d 部署到服务端 ERROR Deployer not found: git 需要安装npm install hexo-deployer-git --save 5 hexo s 启动服务 http://localhost:4000 三 配置1 root _config.yml123456789101112131415161718192021222324# Sitetitle: 安₃subtitle: 我未成名君未嫁 可能俱是不如人description: 一蓑烟雨任平生keywords:author: 安₃language: zh-CNtimezone:# Directoryskip_render: README.md# URLurl: https://anyeansan.github.ioroot: /anyeansan.github.io# Extensionstheme: next# Deploymentdeploy: type: git repository: git@github.com:anyeansan/anyeansan.github.io.git branch: master 2 本地搜索local-search npm install hexo-generator-searchdb root _config.yml12345search: path: search.xml field: post content: true format: html _config.yml12local_search: enable: true 3 RSS npm install hexo-generator-feed --save root _config.yml1234feed: type: atom path: atom.xml limit: 20 _config.yml1rss: /atom.xml 4 目录编号 _config.yml12toc: number: true/false 5 文章底部标签和结束语5.1 底部标签 next/layout/_macro/post.swig中搜索rel=&quot;tag去掉标签或修改标签样式1rel=&quot;tag&quot;&gt; &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125; 5.2 结束语 next/layout/_macro添加passage-end-tag.swig，内容如下12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #66ccff;font-size:14px;&quot;&gt;-------------The End&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;客官请自便-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div next/layout/_macro/post.swig在post-body和post-footer之间添加12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 6 中英文 next/languages/zh-CN.yml酌情修改 7 图片7.1 Logo _config.yml1favicon: 7.2 头像 _config.yml1234avatar: url: /images/lbb.png 头像 rounded: true 是否为圆形 rotated: true 是否鼠标放上去旋转 8 页面底部 _config.yml12345678footer: since: 2019 icon: copyright: powered: theme: beian: creative_commons: 9 menu &amp; sidebar _config.yml12menu:sidebar: 四 技巧1 博文不显示全部内容 在合适的位置加上&lt;!--more--&gt;即可 2 创建tags和categories hexo n page tages source/tages/index.md123title: tagsdate: 2019-11-12 12:46:04type: &quot;tags&quot; 文章中使用 tags为多个标签123456tags:-空格one-空格two-空格three-空格...结果为：#one #two #three #... categorys为层级123456categorys:-空格爷-空格父-空格孙-空格...结果为：爷 &gt; 父 &gt; 孙 &gt;... 3 绑定域名3.1 购买域名 namesilo 3.2 设置dns dns默认有四个A A A CNAME，只需要两个即可 1 A + A 类型 HOSTNAME ADDRESS TTL A 空 ip 3600 A www ip 3600 * ip通过ping yourname.github.io获取 2 A + CNAME 类型 HOSTNAME ADDRESS TTL A 空 ip 3600 CNAME www yourname.github.io 3600 * 创建CNAME * 在source目录创建CNAME文件，内容为你的域名 3.3 配置仓库 在yourname.github.io仓库的setting中配置域名 GitHub Pages -&gt; Custom domain 不确定是否必须0.0 4 README.md4.1 原因 hexo g会把source目录下的md文件(包括Readme.md)渲染为html文件并放到public目录下 hexo d会把public目录下所有文件提交到yourname.github.io仓库 由于public目录下并没有README.md而只有Readme.html，所以deploy后yourname.github.io是没有Readme.md的 4.2 解决 source目录下创建README.md root_config.yml skip_render: README.md","categories":[{"name":"技","slug":"技","permalink":"https://anyeansan.github.io/categories/%E6%8A%80/"},{"name":"hexo","slug":"技/hexo","permalink":"https://anyeansan.github.io/categories/%E6%8A%80/hexo/"}],"tags":[]}]}